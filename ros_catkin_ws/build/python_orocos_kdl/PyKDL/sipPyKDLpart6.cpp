/*
 * Module code.
 *
 * Generated by SIP 4.19.7
 */

#include "sipAPIPyKDL.h"

#line 64 "/home/mars/MarquetteRMC2021/ros_catkin_ws/src/orocos_kinematics_dynamics/python_orocos_kdl/PyKDL/kinfam.sip"
#include <kdl/rotationalinertia.hpp>
#include <kdl/kinfam_io.hpp>
using namespace KDL;
#line 14 "/home/mars/MarquetteRMC2021/ros_catkin_ws/build/python_orocos_kdl/PyKDL/sipPyKDLpart6.cpp"

#line 26 "/home/mars/MarquetteRMC2021/ros_catkin_ws/src/orocos_kinematics_dynamics/python_orocos_kdl/PyKDL/frames.sip"
#include <kdl/frames.hpp>
#include <kdl/frames_io.hpp>
#include <sstream>
using namespace KDL;
#line 21 "/home/mars/MarquetteRMC2021/ros_catkin_ws/build/python_orocos_kdl/PyKDL/sipPyKDLpart6.cpp"


PyDoc_STRVAR(doc_RotationalInertia_Zero, "Zero() -> RotationalInertia");

extern "C" {static PyObject *meth_RotationalInertia_Zero(PyObject *, PyObject *);}
static PyObject *meth_RotationalInertia_Zero(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::RotationalInertia*sipRes;

            sipRes = new  ::RotationalInertia( ::RotationalInertia::Zero());

            return sipConvertFromNewType(sipRes,sipType_RotationalInertia,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RotationalInertia, sipName_Zero, doc_RotationalInertia_Zero);

    return NULL;
}


extern "C" {static PyObject *slot_RotationalInertia___add__(PyObject *,PyObject *);}
static PyObject *slot_RotationalInertia___add__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::RotationalInertia* a0;
        const  ::RotationalInertia* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_RotationalInertia, &a0, sipType_RotationalInertia, &a1))
        {
             ::RotationalInertia*sipRes;

            sipRes = new  ::RotationalInertia((*a0 + *a1));

            return sipConvertFromNewType(sipRes,sipType_RotationalInertia,NULL);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_PyKDL, add_slot, NULL, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_RotationalInertia___mul__(PyObject *,PyObject *);}
static PyObject *slot_RotationalInertia___mul__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = NULL;

    {
         ::RotationalInertia* a0;
         ::Vector* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_RotationalInertia, &a0, sipType_Vector, &a1))
        {
             ::Vector*sipRes;

            sipRes = new  ::Vector((*a0 * *a1));

            return sipConvertFromNewType(sipRes,sipType_Vector,NULL);
        }
    }

    {
        double a0;
        const  ::RotationalInertia* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "dJ9", &a0, sipType_RotationalInertia, &a1))
        {
             ::RotationalInertia*sipRes;

            sipRes = new  ::RotationalInertia((a0 * *a1));

            return sipConvertFromNewType(sipRes,sipType_RotationalInertia,NULL);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_PyKDL, mul_slot, NULL, sipArg0, sipArg1);
}


/* Call the instance's destructor. */
extern "C" {static void release_RotationalInertia(void *, int);}
static void release_RotationalInertia(void *sipCppV, int)
{
    delete reinterpret_cast< ::RotationalInertia *>(sipCppV);
}


extern "C" {static void assign_RotationalInertia(void *, SIP_SSIZE_T, void *);}
static void assign_RotationalInertia(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::RotationalInertia *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::RotationalInertia *>(sipSrc);
}


extern "C" {static void *array_RotationalInertia(SIP_SSIZE_T);}
static void *array_RotationalInertia(SIP_SSIZE_T sipNrElem)
{
    return new  ::RotationalInertia[sipNrElem];
}


extern "C" {static void *copy_RotationalInertia(const void *, SIP_SSIZE_T);}
static void *copy_RotationalInertia(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::RotationalInertia(reinterpret_cast<const  ::RotationalInertia *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_RotationalInertia(sipSimpleWrapper *);}
static void dealloc_RotationalInertia(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_RotationalInertia(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_RotationalInertia(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_RotationalInertia(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::RotationalInertia *sipCpp = 0;

    {
        double a0 = 0;
        double a1 = 0;
        double a2 = 0;
        double a3 = 0;
        double a4 = 0;
        double a5 = 0;

        static const char *sipKwdList[] = {
            sipName_Ixx,
            sipName_Iyy,
            sipName_Izz,
            sipName_Ixy,
            sipName_Ixz,
            sipName_Iyz,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|dddddd", &a0, &a1, &a2, &a3, &a4, &a5))
        {
            sipCpp = new  ::RotationalInertia(a0,a1,a2,a3,a4,a5);

            return sipCpp;
        }
    }

    {
        const  ::RotationalInertia* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_RotationalInertia, &a0))
        {
            sipCpp = new  ::RotationalInertia(*a0);

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_RotationalInertia[] = {
    {(void *)slot_RotationalInertia___add__, add_slot},
    {(void *)slot_RotationalInertia___mul__, mul_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_RotationalInertia[] = {
    {SIP_MLNAME_CAST(sipName_Zero), meth_RotationalInertia_Zero, METH_VARARGS, SIP_MLDOC_CAST(doc_RotationalInertia_Zero)}
};

PyDoc_STRVAR(doc_RotationalInertia, "\1RotationalInertia(Ixx: float = 0, Iyy: float = 0, Izz: float = 0, Ixy: float = 0, Ixz: float = 0, Iyz: float = 0)\n"
"RotationalInertia(RotationalInertia)");


sipClassTypeDef sipTypeDef_PyKDL_RotationalInertia = {
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_RotationalInertia,
        {0},
        0
    },
    {
        sipNameNr_RotationalInertia,
        {0, 0, 1},
        1, methods_RotationalInertia,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_RotationalInertia,
    -1,
    -1,
    0,
    slots_RotationalInertia,
    init_type_RotationalInertia,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_RotationalInertia,
    assign_RotationalInertia,
    array_RotationalInertia,
    copy_RotationalInertia,
    release_RotationalInertia,
    0,
    0,
    0,
    0,
    0,
    0,
    0
};

#line 25 "/home/mars/MarquetteRMC2021/ros_catkin_ws/src/orocos_kinematics_dynamics/python_orocos_kdl/PyKDL/kinfam.sip"
#include <kdl/joint.hpp>
#include <kdl/kinfam_io.hpp>
using namespace KDL;
#line 275 "/home/mars/MarquetteRMC2021/ros_catkin_ws/build/python_orocos_kdl/PyKDL/sipPyKDLpart6.cpp"

#line 21 "/home/mars/MarquetteRMC2021/ros_catkin_ws/src/orocos_kinematics_dynamics/python_orocos_kdl/PyKDL/std_string.sip"
#include <string>
#line 279 "/home/mars/MarquetteRMC2021/ros_catkin_ws/build/python_orocos_kdl/PyKDL/sipPyKDLpart6.cpp"
#line 26 "/home/mars/MarquetteRMC2021/ros_catkin_ws/src/orocos_kinematics_dynamics/python_orocos_kdl/PyKDL/frames.sip"
#include <kdl/frames.hpp>
#include <kdl/frames_io.hpp>
#include <sstream>
using namespace KDL;
#line 285 "/home/mars/MarquetteRMC2021/ros_catkin_ws/build/python_orocos_kdl/PyKDL/sipPyKDLpart6.cpp"
#line 281 "/home/mars/MarquetteRMC2021/ros_catkin_ws/src/orocos_kinematics_dynamics/python_orocos_kdl/PyKDL/frames.sip"
#include <kdl/frames.hpp>
#include <kdl/frames_io.hpp>
#include <sstream>
using namespace KDL;
#line 291 "/home/mars/MarquetteRMC2021/ros_catkin_ws/build/python_orocos_kdl/PyKDL/sipPyKDLpart6.cpp"
#line 201 "/home/mars/MarquetteRMC2021/ros_catkin_ws/src/orocos_kinematics_dynamics/python_orocos_kdl/PyKDL/frames.sip"
#include <kdl/frames.hpp>
#include <kdl/frames_io.hpp>
#include <sstream>
using namespace KDL;
#line 297 "/home/mars/MarquetteRMC2021/ros_catkin_ws/build/python_orocos_kdl/PyKDL/sipPyKDLpart6.cpp"


PyDoc_STRVAR(doc_Joint_pose, "pose(self, q: float) -> Frame");

extern "C" {static PyObject *meth_Joint_pose(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_Joint_pose(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        double a0;
        const  ::Joint *sipCpp;

        static const char *sipKwdList[] = {
            sipName_q,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bd", &sipSelf, sipType_Joint, &sipCpp, &a0))
        {
             ::Frame*sipRes;

            sipRes = new  ::Frame(sipCpp->pose(a0));

            return sipConvertFromNewType(sipRes,sipType_Frame,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Joint, sipName_pose, doc_Joint_pose);

    return NULL;
}


PyDoc_STRVAR(doc_Joint_twist, "twist(self, qdot: float) -> Twist");

extern "C" {static PyObject *meth_Joint_twist(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_Joint_twist(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        double a0;
        const  ::Joint *sipCpp;

        static const char *sipKwdList[] = {
            sipName_qdot,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bd", &sipSelf, sipType_Joint, &sipCpp, &a0))
        {
             ::Twist*sipRes;

            sipRes = new  ::Twist(sipCpp->twist(a0));

            return sipConvertFromNewType(sipRes,sipType_Twist,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Joint, sipName_twist, doc_Joint_twist);

    return NULL;
}


PyDoc_STRVAR(doc_Joint_JointAxis, "JointAxis(self) -> Vector");

extern "C" {static PyObject *meth_Joint_JointAxis(PyObject *, PyObject *);}
static PyObject *meth_Joint_JointAxis(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::Joint *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Joint, &sipCpp))
        {
             ::Vector*sipRes;

            sipRes = new  ::Vector(sipCpp->JointAxis());

            return sipConvertFromNewType(sipRes,sipType_Vector,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Joint, sipName_JointAxis, doc_Joint_JointAxis);

    return NULL;
}


PyDoc_STRVAR(doc_Joint_JointOrigin, "JointOrigin(self) -> Vector");

extern "C" {static PyObject *meth_Joint_JointOrigin(PyObject *, PyObject *);}
static PyObject *meth_Joint_JointOrigin(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::Joint *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Joint, &sipCpp))
        {
             ::Vector*sipRes;

            sipRes = new  ::Vector(sipCpp->JointOrigin());

            return sipConvertFromNewType(sipRes,sipType_Vector,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Joint, sipName_JointOrigin, doc_Joint_JointOrigin);

    return NULL;
}


PyDoc_STRVAR(doc_Joint_getName, "getName(self) -> object");

extern "C" {static PyObject *meth_Joint_getName(PyObject *, PyObject *);}
static PyObject *meth_Joint_getName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::Joint *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Joint, &sipCpp))
        {
             ::std::string*sipRes;

            sipRes = new  ::std::string(sipCpp->getName());

            return sipConvertFromNewType(sipRes,sipType_std_string,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Joint, sipName_getName, doc_Joint_getName);

    return NULL;
}


PyDoc_STRVAR(doc_Joint_getType, "getType(self) -> Joint.JointType");

extern "C" {static PyObject *meth_Joint_getType(PyObject *, PyObject *);}
static PyObject *meth_Joint_getType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::Joint *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Joint, &sipCpp))
        {
             ::Joint::JointType sipRes;

            sipRes = sipCpp->getType();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_Joint_JointType);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Joint, sipName_getType, doc_Joint_getType);

    return NULL;
}


PyDoc_STRVAR(doc_Joint_getTypeName, "getTypeName(self) -> object");

extern "C" {static PyObject *meth_Joint_getTypeName(PyObject *, PyObject *);}
static PyObject *meth_Joint_getTypeName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::Joint *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Joint, &sipCpp))
        {
             ::std::string*sipRes;

            sipRes = new  ::std::string(sipCpp->getTypeName());

            return sipConvertFromNewType(sipRes,sipType_std_string,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Joint, sipName_getTypeName, doc_Joint_getTypeName);

    return NULL;
}


extern "C" {static PyObject *slot_Joint___repr__(PyObject *);}
static PyObject *slot_Joint___repr__(PyObject *sipSelf)
{
     ::Joint *sipCpp = reinterpret_cast< ::Joint *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Joint));

    if (!sipCpp)
        return 0;


    {
        {
            const  ::std::string*sipRes = 0;

#line 54 "/home/mars/MarquetteRMC2021/ros_catkin_ws/src/orocos_kinematics_dynamics/python_orocos_kdl/PyKDL/kinfam.sip"
        std::ostringstream oss;
        oss<<(*sipCpp);
        std::string s(oss.str());
        sipRes=&s;
#line 524 "/home/mars/MarquetteRMC2021/ros_catkin_ws/build/python_orocos_kdl/PyKDL/sipPyKDLpart6.cpp"

            return sipConvertFromType(const_cast< ::std::string *>(sipRes),sipType_std_string,NULL);
        }
    }

    return 0;
}


/* Call the instance's destructor. */
extern "C" {static void release_Joint(void *, int);}
static void release_Joint(void *sipCppV, int)
{
    delete reinterpret_cast< ::Joint *>(sipCppV);
}


extern "C" {static void assign_Joint(void *, SIP_SSIZE_T, void *);}
static void assign_Joint(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::Joint *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::Joint *>(sipSrc);
}


extern "C" {static void *array_Joint(SIP_SSIZE_T);}
static void *array_Joint(SIP_SSIZE_T sipNrElem)
{
    return new  ::Joint[sipNrElem];
}


extern "C" {static void *copy_Joint(const void *, SIP_SSIZE_T);}
static void *copy_Joint(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::Joint(reinterpret_cast<const  ::Joint *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_Joint(sipSimpleWrapper *);}
static void dealloc_Joint(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_Joint(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_Joint(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_Joint(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::Joint *sipCpp = 0;

    {
         ::std::string* a0;
        int a0State = 0;
         ::Joint::JointType a1 =  ::Joint::None;
        double a2 = 1;
        double a3 = 0;
        double a4 = 0;
        double a5 = 0;
        double a6 = 0;

        static const char *sipKwdList[] = {
            sipName_name,
            sipName_type,
            sipName_scale,
            sipName_offset,
            sipName_inertia,
            sipName_damping,
            sipName_stiffness,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J1|Eddddd", sipType_std_string,&a0, &a0State, sipType_Joint_JointType, &a1, &a2, &a3, &a4, &a5, &a6))
        {
            sipCpp = new  ::Joint(*a0,a1,a2,a3,a4,a5,a6);
            sipReleaseType(a0,sipType_std_string,a0State);

            return sipCpp;
        }
    }

    {
         ::Joint::JointType a0 =  ::Joint::None;
        double a1 = 1;
        double a2 = 0;
        double a3 = 0;
        double a4 = 0;
        double a5 = 0;

        static const char *sipKwdList[] = {
            sipName_type,
            sipName_scale,
            sipName_offset,
            sipName_inertia,
            sipName_damping,
            sipName_stiffness,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|Eddddd", sipType_Joint_JointType, &a0, &a1, &a2, &a3, &a4, &a5))
        {
            sipCpp = new  ::Joint(a0,a1,a2,a3,a4,a5);

            return sipCpp;
        }
    }

    {
         ::std::string* a0;
        int a0State = 0;
         ::Vector* a1;
         ::Vector* a2;
         ::Joint::JointType a3;
        double a4 = 1;
        double a5 = 0;
        double a6 = 0;
        double a7 = 0;
        double a8 = 0;

        static const char *sipKwdList[] = {
            sipName_name,
            sipName_origin,
            sipName_axis,
            sipName_type,
            sipName_scale,
            sipName_offset,
            sipName_inertia,
            sipName_damping,
            sipName_stiffness,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J1J9J9E|ddddd", sipType_std_string,&a0, &a0State, sipType_Vector, &a1, sipType_Vector, &a2, sipType_Joint_JointType, &a3, &a4, &a5, &a6, &a7, &a8))
        {
            sipCpp = new  ::Joint(*a0,*a1,*a2,a3,a4,a5,a6,a7,a8);
            sipReleaseType(a0,sipType_std_string,a0State);

            return sipCpp;
        }
    }

    {
         ::Vector* a0;
         ::Vector* a1;
         ::Joint::JointType a2;
        double a3 = 1;
        double a4 = 0;
        double a5 = 0;
        double a6 = 0;
        double a7 = 0;

        static const char *sipKwdList[] = {
            sipName_origin,
            sipName_axis,
            sipName_type,
            sipName_scale,
            sipName_offset,
            sipName_inertia,
            sipName_damping,
            sipName_stiffness,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J9J9E|ddddd", sipType_Vector, &a0, sipType_Vector, &a1, sipType_Joint_JointType, &a2, &a3, &a4, &a5, &a6, &a7))
        {
            sipCpp = new  ::Joint(*a0,*a1,a2,a3,a4,a5,a6,a7);

            return sipCpp;
        }
    }

    {
        const  ::Joint* a0;

        static const char *sipKwdList[] = {
            sipName_in,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J9", sipType_Joint, &a0))
        {
            sipCpp = new  ::Joint(*a0);

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_Joint[] = {
    {(void *)slot_Joint___repr__, repr_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_Joint[] = {
    {SIP_MLNAME_CAST(sipName_JointAxis), meth_Joint_JointAxis, METH_VARARGS, SIP_MLDOC_CAST(doc_Joint_JointAxis)},
    {SIP_MLNAME_CAST(sipName_JointOrigin), meth_Joint_JointOrigin, METH_VARARGS, SIP_MLDOC_CAST(doc_Joint_JointOrigin)},
    {SIP_MLNAME_CAST(sipName_getName), meth_Joint_getName, METH_VARARGS, SIP_MLDOC_CAST(doc_Joint_getName)},
    {SIP_MLNAME_CAST(sipName_getType), meth_Joint_getType, METH_VARARGS, SIP_MLDOC_CAST(doc_Joint_getType)},
    {SIP_MLNAME_CAST(sipName_getTypeName), meth_Joint_getTypeName, METH_VARARGS, SIP_MLDOC_CAST(doc_Joint_getTypeName)},
    {SIP_MLNAME_CAST(sipName_pose), (PyCFunction)meth_Joint_pose, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_Joint_pose)},
    {SIP_MLNAME_CAST(sipName_twist), (PyCFunction)meth_Joint_twist, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_Joint_twist)}
};

static sipEnumMemberDef enummembers_Joint[] = {
    {sipName_None, static_cast<int>( ::Joint::None), 23},
    {sipName_RotAxis, static_cast<int>( ::Joint::RotAxis), 23},
    {sipName_RotX, static_cast<int>( ::Joint::RotX), 23},
    {sipName_RotY, static_cast<int>( ::Joint::RotY), 23},
    {sipName_RotZ, static_cast<int>( ::Joint::RotZ), 23},
    {sipName_TransAxis, static_cast<int>( ::Joint::TransAxis), 23},
    {sipName_TransX, static_cast<int>( ::Joint::TransX), 23},
    {sipName_TransY, static_cast<int>( ::Joint::TransY), 23},
    {sipName_TransZ, static_cast<int>( ::Joint::TransZ), 23},
};

PyDoc_STRVAR(doc_Joint, "\1Joint(name: object, type: Joint.JointType = Joint.None, scale: float = 1, offset: float = 0, inertia: float = 0, damping: float = 0, stiffness: float = 0)\n"
"Joint(type: Joint.JointType = Joint.None, scale: float = 1, offset: float = 0, inertia: float = 0, damping: float = 0, stiffness: float = 0)\n"
"Joint(name: object, origin: Vector, axis: Vector, type: Joint.JointType, scale: float = 1, offset: float = 0, inertia: float = 0, damping: float = 0, stiffness: float = 0)\n"
"Joint(origin: Vector, axis: Vector, type: Joint.JointType, scale: float = 1, offset: float = 0, inertia: float = 0, damping: float = 0, stiffness: float = 0)\n"
"Joint(in_: Joint)");


sipClassTypeDef sipTypeDef_PyKDL_Joint = {
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_Joint,
        {0},
        0
    },
    {
        sipNameNr_Joint,
        {0, 0, 1},
        7, methods_Joint,
        9, enummembers_Joint,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_Joint,
    -1,
    -1,
    0,
    slots_Joint,
    init_type_Joint,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_Joint,
    assign_Joint,
    array_Joint,
    copy_Joint,
    release_Joint,
    0,
    0,
    0,
    0,
    0,
    0,
    0
};

#line 352 "/home/mars/MarquetteRMC2021/ros_catkin_ws/src/orocos_kinematics_dynamics/python_orocos_kdl/PyKDL/frames.sip"
#include <kdl/frames.hpp>
#include <kdl/frames_io.hpp>
#include <sstream>
using namespace KDL;
#line 808 "/home/mars/MarquetteRMC2021/ros_catkin_ws/build/python_orocos_kdl/PyKDL/sipPyKDLpart6.cpp"

#line 26 "/home/mars/MarquetteRMC2021/ros_catkin_ws/src/orocos_kinematics_dynamics/python_orocos_kdl/PyKDL/frames.sip"
#include <kdl/frames.hpp>
#include <kdl/frames_io.hpp>
#include <sstream>
using namespace KDL;
#line 815 "/home/mars/MarquetteRMC2021/ros_catkin_ws/build/python_orocos_kdl/PyKDL/sipPyKDLpart6.cpp"
#line 21 "/home/mars/MarquetteRMC2021/ros_catkin_ws/src/orocos_kinematics_dynamics/python_orocos_kdl/PyKDL/std_string.sip"
#include <string>
#line 818 "/home/mars/MarquetteRMC2021/ros_catkin_ws/build/python_orocos_kdl/PyKDL/sipPyKDLpart6.cpp"


PyDoc_STRVAR(doc_Wrench_Zero, "Zero() -> Wrench");

extern "C" {static PyObject *meth_Wrench_Zero(PyObject *, PyObject *);}
static PyObject *meth_Wrench_Zero(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::Wrench*sipRes;

            sipRes = new  ::Wrench( ::Wrench::Zero());

            return sipConvertFromNewType(sipRes,sipType_Wrench,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Wrench, sipName_Zero, doc_Wrench_Zero);

    return NULL;
}


PyDoc_STRVAR(doc_Wrench_ReverseSign, "ReverseSign(self)");

extern "C" {static PyObject *meth_Wrench_ReverseSign(PyObject *, PyObject *);}
static PyObject *meth_Wrench_ReverseSign(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::Wrench *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Wrench, &sipCpp))
        {
            sipCpp->ReverseSign();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Wrench, sipName_ReverseSign, doc_Wrench_ReverseSign);

    return NULL;
}


PyDoc_STRVAR(doc_Wrench_RefPoint, "RefPoint(self, v_base_AB: Vector) -> Wrench");

extern "C" {static PyObject *meth_Wrench_RefPoint(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_Wrench_RefPoint(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::Vector* a0;
        const  ::Wrench *sipCpp;

        static const char *sipKwdList[] = {
            sipName_v_base_AB,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9", &sipSelf, sipType_Wrench, &sipCpp, sipType_Vector, &a0))
        {
             ::Wrench*sipRes;

            sipRes = new  ::Wrench(sipCpp->RefPoint(*a0));

            return sipConvertFromNewType(sipRes,sipType_Wrench,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Wrench, sipName_RefPoint, doc_Wrench_RefPoint);

    return NULL;
}


extern "C" {static PyObject *slot_Wrench___neg__(PyObject *);}
static PyObject *slot_Wrench___neg__(PyObject *sipSelf)
{
     ::Wrench *sipCpp = reinterpret_cast< ::Wrench *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Wrench));

    if (!sipCpp)
        return 0;


    {
        {
             ::Wrench*sipRes;

            sipRes = new  ::Wrench(-(*sipCpp));

            return sipConvertFromNewType(sipRes,sipType_Wrench,NULL);
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_Wrench___mul__(PyObject *,PyObject *);}
static PyObject *slot_Wrench___mul__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::Wrench* a0;
        double a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9d", sipType_Wrench, &a0, &a1))
        {
             ::Wrench*sipRes;

            sipRes = new  ::Wrench((*a0 * a1));

            return sipConvertFromNewType(sipRes,sipType_Wrench,NULL);
        }
    }

    {
        double a0;
        const  ::Wrench* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "dJ9", &a0, sipType_Wrench, &a1))
        {
             ::Wrench*sipRes;

            sipRes = new  ::Wrench((a0 * *a1));

            return sipConvertFromNewType(sipRes,sipType_Wrench,NULL);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_PyKDL, mul_slot, NULL, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_Wrench___div__(PyObject *,PyObject *);}
static PyObject *slot_Wrench___div__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::Wrench* a0;
        double a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9d", sipType_Wrench, &a0, &a1))
        {
             ::Wrench*sipRes;

            sipRes = new  ::Wrench((*a0 / a1));

            return sipConvertFromNewType(sipRes,sipType_Wrench,NULL);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_PyKDL, div_slot, NULL, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_Wrench___add__(PyObject *,PyObject *);}
static PyObject *slot_Wrench___add__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::Wrench* a0;
        const  ::Wrench* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_Wrench, &a0, sipType_Wrench, &a1))
        {
             ::Wrench*sipRes;

            sipRes = new  ::Wrench((*a0 + *a1));

            return sipConvertFromNewType(sipRes,sipType_Wrench,NULL);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_PyKDL, add_slot, NULL, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_Wrench___sub__(PyObject *,PyObject *);}
static PyObject *slot_Wrench___sub__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::Wrench* a0;
        const  ::Wrench* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_Wrench, &a0, sipType_Wrench, &a1))
        {
             ::Wrench*sipRes;

            sipRes = new  ::Wrench((*a0 - *a1));

            return sipConvertFromNewType(sipRes,sipType_Wrench,NULL);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_PyKDL, sub_slot, NULL, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_Wrench___eq__(PyObject *,PyObject *);}
static PyObject *slot_Wrench___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::Wrench *sipCpp = reinterpret_cast< ::Wrench *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Wrench));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const  ::Wrench* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_Wrench, &a0))
        {
            bool sipRes;

            sipRes = operator==((*sipCpp), *a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_PyKDL, eq_slot, sipType_Wrench, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_Wrench___ne__(PyObject *,PyObject *);}
static PyObject *slot_Wrench___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::Wrench *sipCpp = reinterpret_cast< ::Wrench *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Wrench));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const  ::Wrench* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_Wrench, &a0))
        {
            bool sipRes;

            sipRes = operator!=((*sipCpp), *a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_PyKDL, ne_slot, sipType_Wrench, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_Wrench___repr__(PyObject *);}
static PyObject *slot_Wrench___repr__(PyObject *sipSelf)
{
     ::Wrench *sipCpp = reinterpret_cast< ::Wrench *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Wrench));

    if (!sipCpp)
        return 0;


    {
        {
            const  ::std::string*sipRes = 0;

#line 389 "/home/mars/MarquetteRMC2021/ros_catkin_ws/src/orocos_kinematics_dynamics/python_orocos_kdl/PyKDL/frames.sip"
    std::ostringstream oss;
    oss<<(*sipCpp);
    std::string s(oss.str());
    sipRes=&s;
#line 1138 "/home/mars/MarquetteRMC2021/ros_catkin_ws/build/python_orocos_kdl/PyKDL/sipPyKDLpart6.cpp"

            return sipConvertFromType(const_cast< ::std::string *>(sipRes),sipType_std_string,NULL);
        }
    }

    return 0;
}


extern "C" {static int slot_Wrench___setitem__(PyObject *,PyObject *);}
static int slot_Wrench___setitem__(PyObject *sipSelf,PyObject *sipArgs)
{
     ::Wrench *sipCpp = reinterpret_cast< ::Wrench *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Wrench));

    if (!sipCpp)
        return -1;

    PyObject *sipParseErr = NULL;

    {
        int a0;
        double a1;

        if (sipParseArgs(&sipParseErr, sipArgs, "id", &a0, &a1))
        {
#line 380 "/home/mars/MarquetteRMC2021/ros_catkin_ws/src/orocos_kinematics_dynamics/python_orocos_kdl/PyKDL/frames.sip"
    if (a0 < 0 || a0 > 5) {
        PyErr_SetString(PyExc_IndexError, "Twist index out of range");
        return 0;
    }
    (*sipCpp)(a0)=a1;
#line 1170 "/home/mars/MarquetteRMC2021/ros_catkin_ws/build/python_orocos_kdl/PyKDL/sipPyKDLpart6.cpp"

            return 0;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Wrench, sipName___setitem__, NULL);

    return -1;
}


extern "C" {static PyObject *slot_Wrench___getitem__(PyObject *,PyObject *);}
static PyObject *slot_Wrench___getitem__(PyObject *sipSelf,PyObject *sipArg)
{
     ::Wrench *sipCpp = reinterpret_cast< ::Wrench *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Wrench));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
            double sipRes = 0;

#line 371 "/home/mars/MarquetteRMC2021/ros_catkin_ws/src/orocos_kinematics_dynamics/python_orocos_kdl/PyKDL/frames.sip"
    if (a0 < 0 || a0 > 5) {
        PyErr_SetString(PyExc_IndexError, "Twist index out of range");
        return 0;
    }
    sipRes=(*sipCpp)(a0);
#line 1206 "/home/mars/MarquetteRMC2021/ros_catkin_ws/build/python_orocos_kdl/PyKDL/sipPyKDLpart6.cpp"

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Wrench, sipName___getitem__, NULL);

    return 0;
}


extern "C" {static PyObject *slot_Wrench___iadd__(PyObject *,PyObject *);}
static PyObject *slot_Wrench___iadd__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_Wrench)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::Wrench *sipCpp = reinterpret_cast< ::Wrench *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Wrench));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const  ::Wrench* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_Wrench, &a0))
        {
            sipCpp-> ::Wrench::operator+=(*a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_Wrench___isub__(PyObject *,PyObject *);}
static PyObject *slot_Wrench___isub__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_Wrench)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::Wrench *sipCpp = reinterpret_cast< ::Wrench *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Wrench));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const  ::Wrench* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_Wrench, &a0))
        {
            sipCpp-> ::Wrench::operator-=(*a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


/* Call the instance's destructor. */
extern "C" {static void release_Wrench(void *, int);}
static void release_Wrench(void *sipCppV, int)
{
    delete reinterpret_cast< ::Wrench *>(sipCppV);
}


extern "C" {static PyObject *pickle_Wrench(void *);}
static PyObject *pickle_Wrench(void *sipCppV)
{
     ::Wrench *sipCpp = reinterpret_cast< ::Wrench *>(sipCppV);
    PyObject *sipRes;

#line 400 "/home/mars/MarquetteRMC2021/ros_catkin_ws/src/orocos_kinematics_dynamics/python_orocos_kdl/PyKDL/frames.sip"
    const sipTypeDef *vector_type = sipFindType("Vector");
    sipRes = Py_BuildValue("OO", sipConvertFromType(&(sipCpp->force), vector_type, Py_None),
                                 sipConvertFromType(&(sipCpp->torque), vector_type, Py_None));
#line 1317 "/home/mars/MarquetteRMC2021/ros_catkin_ws/build/python_orocos_kdl/PyKDL/sipPyKDLpart6.cpp"

    return sipRes;
}


extern "C" {static void assign_Wrench(void *, SIP_SSIZE_T, void *);}
static void assign_Wrench(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::Wrench *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::Wrench *>(sipSrc);
}


extern "C" {static void *array_Wrench(SIP_SSIZE_T);}
static void *array_Wrench(SIP_SSIZE_T sipNrElem)
{
    return new  ::Wrench[sipNrElem];
}


extern "C" {static void *copy_Wrench(const void *, SIP_SSIZE_T);}
static void *copy_Wrench(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::Wrench(reinterpret_cast<const  ::Wrench *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_Wrench(sipSimpleWrapper *);}
static void dealloc_Wrench(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_Wrench(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_Wrench(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_Wrench(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::Wrench *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            sipCpp = new  ::Wrench();

            return sipCpp;
        }
    }

    {
        const  ::Vector* a0;
        const  ::Vector* a1;

        static const char *sipKwdList[] = {
            sipName_force,
            sipName_torque,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J9J9", sipType_Vector, &a0, sipType_Vector, &a1))
        {
            sipCpp = new  ::Wrench(*a0,*a1);

            return sipCpp;
        }
    }

    {
        const  ::Wrench* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_Wrench, &a0))
        {
            sipCpp = new  ::Wrench(*a0);

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_Wrench[] = {
    {(void *)slot_Wrench___neg__, neg_slot},
    {(void *)slot_Wrench___mul__, mul_slot},
    {(void *)slot_Wrench___div__, div_slot},
    {(void *)slot_Wrench___add__, add_slot},
    {(void *)slot_Wrench___sub__, sub_slot},
    {(void *)slot_Wrench___eq__, eq_slot},
    {(void *)slot_Wrench___ne__, ne_slot},
    {(void *)slot_Wrench___repr__, repr_slot},
    {(void *)slot_Wrench___setitem__, setitem_slot},
    {(void *)slot_Wrench___getitem__, getitem_slot},
    {(void *)slot_Wrench___iadd__, iadd_slot},
    {(void *)slot_Wrench___isub__, isub_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_Wrench[] = {
    {SIP_MLNAME_CAST(sipName_RefPoint), (PyCFunction)meth_Wrench_RefPoint, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_Wrench_RefPoint)},
    {SIP_MLNAME_CAST(sipName_ReverseSign), meth_Wrench_ReverseSign, METH_VARARGS, SIP_MLDOC_CAST(doc_Wrench_ReverseSign)},
    {SIP_MLNAME_CAST(sipName_Zero), meth_Wrench_Zero, METH_VARARGS, SIP_MLDOC_CAST(doc_Wrench_Zero)}
};


extern "C" {static PyObject *varget_Wrench_force(void *, PyObject *, PyObject *);}
static PyObject *varget_Wrench_force(void *sipSelf, PyObject *sipPySelf, PyObject *)
{
    PyObject *sipPy;
     ::Vector*sipVal;
     ::Wrench *sipCpp = reinterpret_cast< ::Wrench *>(sipSelf);

    sipPy = sipGetReference(sipPySelf, -22);

    if (sipPy)
        return sipPy;

    sipVal = &sipCpp->force;

    sipPy = sipConvertFromType(sipVal, sipType_Vector, NULL);

    if (sipPy)
    {
        sipKeepReference(sipPy, -21, sipPySelf);
        sipKeepReference(sipPySelf, -22, sipPy);
    }

    return sipPy;
}


extern "C" {static int varset_Wrench_force(void *, PyObject *, PyObject *);}
static int varset_Wrench_force(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::Vector*sipVal;
     ::Wrench *sipCpp = reinterpret_cast< ::Wrench *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::Vector *>(sipForceConvertToType(sipPy,sipType_Vector,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->force = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_Wrench_torque(void *, PyObject *, PyObject *);}
static PyObject *varget_Wrench_torque(void *sipSelf, PyObject *sipPySelf, PyObject *)
{
    PyObject *sipPy;
     ::Vector*sipVal;
     ::Wrench *sipCpp = reinterpret_cast< ::Wrench *>(sipSelf);

    sipPy = sipGetReference(sipPySelf, -24);

    if (sipPy)
        return sipPy;

    sipVal = &sipCpp->torque;

    sipPy = sipConvertFromType(sipVal, sipType_Vector, NULL);

    if (sipPy)
    {
        sipKeepReference(sipPy, -23, sipPySelf);
        sipKeepReference(sipPySelf, -24, sipPy);
    }

    return sipPy;
}


extern "C" {static int varset_Wrench_torque(void *, PyObject *, PyObject *);}
static int varset_Wrench_torque(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::Vector*sipVal;
     ::Wrench *sipCpp = reinterpret_cast< ::Wrench *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::Vector *>(sipForceConvertToType(sipPy,sipType_Vector,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->torque = *sipVal;

    return 0;
}

sipVariableDef variables_Wrench[] = {
    {InstanceVariable, sipName_force, (PyMethodDef *)varget_Wrench_force, (PyMethodDef *)varset_Wrench_force, NULL, NULL},
    {InstanceVariable, sipName_torque, (PyMethodDef *)varget_Wrench_torque, (PyMethodDef *)varset_Wrench_torque, NULL, NULL},
};

PyDoc_STRVAR(doc_Wrench, "\1Wrench()\n"
"Wrench(force: Vector, torque: Vector)\n"
"Wrench(Wrench)");


sipClassTypeDef sipTypeDef_PyKDL_Wrench = {
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_Wrench,
        {0},
        0
    },
    {
        sipNameNr_Wrench,
        {0, 0, 1},
        3, methods_Wrench,
        0, 0,
        2, variables_Wrench,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_Wrench,
    -1,
    -1,
    0,
    slots_Wrench,
    init_type_Wrench,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_Wrench,
    assign_Wrench,
    array_Wrench,
    copy_Wrench,
    release_Wrench,
    0,
    0,
    0,
    0,
    pickle_Wrench,
    0,
    0
};

#line 281 "/home/mars/MarquetteRMC2021/ros_catkin_ws/src/orocos_kinematics_dynamics/python_orocos_kdl/PyKDL/frames.sip"
#include <kdl/frames.hpp>
#include <kdl/frames_io.hpp>
#include <sstream>
using namespace KDL;
#line 1581 "/home/mars/MarquetteRMC2021/ros_catkin_ws/build/python_orocos_kdl/PyKDL/sipPyKDLpart6.cpp"

#line 26 "/home/mars/MarquetteRMC2021/ros_catkin_ws/src/orocos_kinematics_dynamics/python_orocos_kdl/PyKDL/frames.sip"
#include <kdl/frames.hpp>
#include <kdl/frames_io.hpp>
#include <sstream>
using namespace KDL;
#line 1588 "/home/mars/MarquetteRMC2021/ros_catkin_ws/build/python_orocos_kdl/PyKDL/sipPyKDLpart6.cpp"
#line 21 "/home/mars/MarquetteRMC2021/ros_catkin_ws/src/orocos_kinematics_dynamics/python_orocos_kdl/PyKDL/std_string.sip"
#include <string>
#line 1591 "/home/mars/MarquetteRMC2021/ros_catkin_ws/build/python_orocos_kdl/PyKDL/sipPyKDLpart6.cpp"


PyDoc_STRVAR(doc_Twist_Zero, "Zero() -> Twist");

extern "C" {static PyObject *meth_Twist_Zero(PyObject *, PyObject *);}
static PyObject *meth_Twist_Zero(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::Twist*sipRes;

            sipRes = new  ::Twist( ::Twist::Zero());

            return sipConvertFromNewType(sipRes,sipType_Twist,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Twist, sipName_Zero, doc_Twist_Zero);

    return NULL;
}


PyDoc_STRVAR(doc_Twist_ReverseSign, "ReverseSign(self)");

extern "C" {static PyObject *meth_Twist_ReverseSign(PyObject *, PyObject *);}
static PyObject *meth_Twist_ReverseSign(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::Twist *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Twist, &sipCpp))
        {
            sipCpp->ReverseSign();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Twist, sipName_ReverseSign, doc_Twist_ReverseSign);

    return NULL;
}


PyDoc_STRVAR(doc_Twist_RefPoint, "RefPoint(self, v_base_AB: Vector) -> Twist");

extern "C" {static PyObject *meth_Twist_RefPoint(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_Twist_RefPoint(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::Vector* a0;
        const  ::Twist *sipCpp;

        static const char *sipKwdList[] = {
            sipName_v_base_AB,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9", &sipSelf, sipType_Twist, &sipCpp, sipType_Vector, &a0))
        {
             ::Twist*sipRes;

            sipRes = new  ::Twist(sipCpp->RefPoint(*a0));

            return sipConvertFromNewType(sipRes,sipType_Twist,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Twist, sipName_RefPoint, doc_Twist_RefPoint);

    return NULL;
}


extern "C" {static PyObject *slot_Twist___neg__(PyObject *);}
static PyObject *slot_Twist___neg__(PyObject *sipSelf)
{
     ::Twist *sipCpp = reinterpret_cast< ::Twist *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Twist));

    if (!sipCpp)
        return 0;


    {
        {
             ::Twist*sipRes;

            sipRes = new  ::Twist(-(*sipCpp));

            return sipConvertFromNewType(sipRes,sipType_Twist,NULL);
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_Twist___mul__(PyObject *,PyObject *);}
static PyObject *slot_Twist___mul__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::Twist* a0;
        double a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9d", sipType_Twist, &a0, &a1))
        {
             ::Twist*sipRes;

            sipRes = new  ::Twist((*a0 * a1));

            return sipConvertFromNewType(sipRes,sipType_Twist,NULL);
        }
    }

    {
        double a0;
        const  ::Twist* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "dJ9", &a0, sipType_Twist, &a1))
        {
             ::Twist*sipRes;

            sipRes = new  ::Twist((a0 * *a1));

            return sipConvertFromNewType(sipRes,sipType_Twist,NULL);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_PyKDL, mul_slot, NULL, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_Twist___div__(PyObject *,PyObject *);}
static PyObject *slot_Twist___div__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::Twist* a0;
        double a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9d", sipType_Twist, &a0, &a1))
        {
             ::Twist*sipRes;

            sipRes = new  ::Twist((*a0 / a1));

            return sipConvertFromNewType(sipRes,sipType_Twist,NULL);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_PyKDL, div_slot, NULL, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_Twist___add__(PyObject *,PyObject *);}
static PyObject *slot_Twist___add__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::Twist* a0;
        const  ::Twist* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_Twist, &a0, sipType_Twist, &a1))
        {
             ::Twist*sipRes;

            sipRes = new  ::Twist((*a0 + *a1));

            return sipConvertFromNewType(sipRes,sipType_Twist,NULL);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_PyKDL, add_slot, NULL, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_Twist___sub__(PyObject *,PyObject *);}
static PyObject *slot_Twist___sub__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::Twist* a0;
        const  ::Twist* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_Twist, &a0, sipType_Twist, &a1))
        {
             ::Twist*sipRes;

            sipRes = new  ::Twist((*a0 - *a1));

            return sipConvertFromNewType(sipRes,sipType_Twist,NULL);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_PyKDL, sub_slot, NULL, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_Twist___eq__(PyObject *,PyObject *);}
static PyObject *slot_Twist___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::Twist *sipCpp = reinterpret_cast< ::Twist *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Twist));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const  ::Twist* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_Twist, &a0))
        {
            bool sipRes;

            sipRes = operator==((*sipCpp), *a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_PyKDL, eq_slot, sipType_Twist, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_Twist___ne__(PyObject *,PyObject *);}
static PyObject *slot_Twist___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::Twist *sipCpp = reinterpret_cast< ::Twist *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Twist));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const  ::Twist* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_Twist, &a0))
        {
            bool sipRes;

            sipRes = operator!=((*sipCpp), *a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_PyKDL, ne_slot, sipType_Twist, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_Twist___repr__(PyObject *);}
static PyObject *slot_Twist___repr__(PyObject *sipSelf)
{
     ::Twist *sipCpp = reinterpret_cast< ::Twist *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Twist));

    if (!sipCpp)
        return 0;


    {
        {
            const  ::std::string*sipRes = 0;

#line 316 "/home/mars/MarquetteRMC2021/ros_catkin_ws/src/orocos_kinematics_dynamics/python_orocos_kdl/PyKDL/frames.sip"
    std::ostringstream oss;
    oss<<(*sipCpp);
    std::string s(oss.str());
    sipRes=&s;
#line 1911 "/home/mars/MarquetteRMC2021/ros_catkin_ws/build/python_orocos_kdl/PyKDL/sipPyKDLpart6.cpp"

            return sipConvertFromType(const_cast< ::std::string *>(sipRes),sipType_std_string,NULL);
        }
    }

    return 0;
}


extern "C" {static int slot_Twist___setitem__(PyObject *,PyObject *);}
static int slot_Twist___setitem__(PyObject *sipSelf,PyObject *sipArgs)
{
     ::Twist *sipCpp = reinterpret_cast< ::Twist *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Twist));

    if (!sipCpp)
        return -1;

    PyObject *sipParseErr = NULL;

    {
        int a0;
        double a1;

        if (sipParseArgs(&sipParseErr, sipArgs, "id", &a0, &a1))
        {
#line 307 "/home/mars/MarquetteRMC2021/ros_catkin_ws/src/orocos_kinematics_dynamics/python_orocos_kdl/PyKDL/frames.sip"
    if (a0 < 0 || a0 > 5) {
        PyErr_SetString(PyExc_IndexError, "Twist index out of range");
        return 0;
    }
    (*sipCpp)(a0)=a1;
#line 1943 "/home/mars/MarquetteRMC2021/ros_catkin_ws/build/python_orocos_kdl/PyKDL/sipPyKDLpart6.cpp"

            return 0;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Twist, sipName___setitem__, NULL);

    return -1;
}


extern "C" {static PyObject *slot_Twist___getitem__(PyObject *,PyObject *);}
static PyObject *slot_Twist___getitem__(PyObject *sipSelf,PyObject *sipArg)
{
     ::Twist *sipCpp = reinterpret_cast< ::Twist *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Twist));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
            double sipRes = 0;

#line 298 "/home/mars/MarquetteRMC2021/ros_catkin_ws/src/orocos_kinematics_dynamics/python_orocos_kdl/PyKDL/frames.sip"
    if (a0 < 0 || a0 > 5) {
        PyErr_SetString(PyExc_IndexError, "Twist index out of range");
        return 0;
    }
    sipRes=(*sipCpp)(a0);
#line 1979 "/home/mars/MarquetteRMC2021/ros_catkin_ws/build/python_orocos_kdl/PyKDL/sipPyKDLpart6.cpp"

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Twist, sipName___getitem__, NULL);

    return 0;
}


extern "C" {static PyObject *slot_Twist___iadd__(PyObject *,PyObject *);}
static PyObject *slot_Twist___iadd__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_Twist)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::Twist *sipCpp = reinterpret_cast< ::Twist *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Twist));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const  ::Twist* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_Twist, &a0))
        {
            sipCpp-> ::Twist::operator+=(*a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_Twist___isub__(PyObject *,PyObject *);}
static PyObject *slot_Twist___isub__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_Twist)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::Twist *sipCpp = reinterpret_cast< ::Twist *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Twist));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const  ::Twist* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_Twist, &a0))
        {
            sipCpp-> ::Twist::operator-=(*a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


/* Call the instance's destructor. */
extern "C" {static void release_Twist(void *, int);}
static void release_Twist(void *sipCppV, int)
{
    delete reinterpret_cast< ::Twist *>(sipCppV);
}


extern "C" {static PyObject *pickle_Twist(void *);}
static PyObject *pickle_Twist(void *sipCppV)
{
     ::Twist *sipCpp = reinterpret_cast< ::Twist *>(sipCppV);
    PyObject *sipRes;

#line 328 "/home/mars/MarquetteRMC2021/ros_catkin_ws/src/orocos_kinematics_dynamics/python_orocos_kdl/PyKDL/frames.sip"
    const sipTypeDef *vector_type = sipFindType("Vector");
    sipRes = Py_BuildValue("OO", sipConvertFromType(&(sipCpp->vel), vector_type, Py_None),
                                 sipConvertFromType(&(sipCpp->rot), vector_type, Py_None));
#line 2090 "/home/mars/MarquetteRMC2021/ros_catkin_ws/build/python_orocos_kdl/PyKDL/sipPyKDLpart6.cpp"

    return sipRes;
}


extern "C" {static void assign_Twist(void *, SIP_SSIZE_T, void *);}
static void assign_Twist(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::Twist *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::Twist *>(sipSrc);
}


extern "C" {static void *array_Twist(SIP_SSIZE_T);}
static void *array_Twist(SIP_SSIZE_T sipNrElem)
{
    return new  ::Twist[sipNrElem];
}


extern "C" {static void *copy_Twist(const void *, SIP_SSIZE_T);}
static void *copy_Twist(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::Twist(reinterpret_cast<const  ::Twist *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_Twist(sipSimpleWrapper *);}
static void dealloc_Twist(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_Twist(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_Twist(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_Twist(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::Twist *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            sipCpp = new  ::Twist();

            return sipCpp;
        }
    }

    {
        const  ::Vector* a0;
        const  ::Vector* a1;

        static const char *sipKwdList[] = {
            sipName__vel,
            sipName__rot,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J9J9", sipType_Vector, &a0, sipType_Vector, &a1))
        {
            sipCpp = new  ::Twist(*a0,*a1);

            return sipCpp;
        }
    }

    {
        const  ::Twist* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_Twist, &a0))
        {
            sipCpp = new  ::Twist(*a0);

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_Twist[] = {
    {(void *)slot_Twist___neg__, neg_slot},
    {(void *)slot_Twist___mul__, mul_slot},
    {(void *)slot_Twist___div__, div_slot},
    {(void *)slot_Twist___add__, add_slot},
    {(void *)slot_Twist___sub__, sub_slot},
    {(void *)slot_Twist___eq__, eq_slot},
    {(void *)slot_Twist___ne__, ne_slot},
    {(void *)slot_Twist___repr__, repr_slot},
    {(void *)slot_Twist___setitem__, setitem_slot},
    {(void *)slot_Twist___getitem__, getitem_slot},
    {(void *)slot_Twist___iadd__, iadd_slot},
    {(void *)slot_Twist___isub__, isub_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_Twist[] = {
    {SIP_MLNAME_CAST(sipName_RefPoint), (PyCFunction)meth_Twist_RefPoint, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_Twist_RefPoint)},
    {SIP_MLNAME_CAST(sipName_ReverseSign), meth_Twist_ReverseSign, METH_VARARGS, SIP_MLDOC_CAST(doc_Twist_ReverseSign)},
    {SIP_MLNAME_CAST(sipName_Zero), meth_Twist_Zero, METH_VARARGS, SIP_MLDOC_CAST(doc_Twist_Zero)}
};


extern "C" {static PyObject *varget_Twist_rot(void *, PyObject *, PyObject *);}
static PyObject *varget_Twist_rot(void *sipSelf, PyObject *sipPySelf, PyObject *)
{
    PyObject *sipPy;
     ::Vector*sipVal;
     ::Twist *sipCpp = reinterpret_cast< ::Twist *>(sipSelf);

    sipPy = sipGetReference(sipPySelf, -26);

    if (sipPy)
        return sipPy;

    sipVal = &sipCpp->rot;

    sipPy = sipConvertFromType(sipVal, sipType_Vector, NULL);

    if (sipPy)
    {
        sipKeepReference(sipPy, -25, sipPySelf);
        sipKeepReference(sipPySelf, -26, sipPy);
    }

    return sipPy;
}


extern "C" {static int varset_Twist_rot(void *, PyObject *, PyObject *);}
static int varset_Twist_rot(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::Vector*sipVal;
     ::Twist *sipCpp = reinterpret_cast< ::Twist *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::Vector *>(sipForceConvertToType(sipPy,sipType_Vector,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->rot = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_Twist_vel(void *, PyObject *, PyObject *);}
static PyObject *varget_Twist_vel(void *sipSelf, PyObject *sipPySelf, PyObject *)
{
    PyObject *sipPy;
     ::Vector*sipVal;
     ::Twist *sipCpp = reinterpret_cast< ::Twist *>(sipSelf);

    sipPy = sipGetReference(sipPySelf, -28);

    if (sipPy)
        return sipPy;

    sipVal = &sipCpp->vel;

    sipPy = sipConvertFromType(sipVal, sipType_Vector, NULL);

    if (sipPy)
    {
        sipKeepReference(sipPy, -27, sipPySelf);
        sipKeepReference(sipPySelf, -28, sipPy);
    }

    return sipPy;
}


extern "C" {static int varset_Twist_vel(void *, PyObject *, PyObject *);}
static int varset_Twist_vel(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::Vector*sipVal;
     ::Twist *sipCpp = reinterpret_cast< ::Twist *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::Vector *>(sipForceConvertToType(sipPy,sipType_Vector,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->vel = *sipVal;

    return 0;
}

sipVariableDef variables_Twist[] = {
    {InstanceVariable, sipName_rot, (PyMethodDef *)varget_Twist_rot, (PyMethodDef *)varset_Twist_rot, NULL, NULL},
    {InstanceVariable, sipName_vel, (PyMethodDef *)varget_Twist_vel, (PyMethodDef *)varset_Twist_vel, NULL, NULL},
};

PyDoc_STRVAR(doc_Twist, "\1Twist()\n"
"Twist(_vel: Vector, _rot: Vector)\n"
"Twist(Twist)");


sipClassTypeDef sipTypeDef_PyKDL_Twist = {
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_Twist,
        {0},
        0
    },
    {
        sipNameNr_Twist,
        {0, 0, 1},
        3, methods_Twist,
        0, 0,
        2, variables_Twist,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_Twist,
    -1,
    -1,
    0,
    slots_Twist,
    init_type_Twist,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_Twist,
    assign_Twist,
    array_Twist,
    copy_Twist,
    release_Twist,
    0,
    0,
    0,
    0,
    pickle_Twist,
    0,
    0
};

#line 201 "/home/mars/MarquetteRMC2021/ros_catkin_ws/src/orocos_kinematics_dynamics/python_orocos_kdl/PyKDL/frames.sip"
#include <kdl/frames.hpp>
#include <kdl/frames_io.hpp>
#include <sstream>
using namespace KDL;
#line 2354 "/home/mars/MarquetteRMC2021/ros_catkin_ws/build/python_orocos_kdl/PyKDL/sipPyKDLpart6.cpp"

#line 102 "/home/mars/MarquetteRMC2021/ros_catkin_ws/src/orocos_kinematics_dynamics/python_orocos_kdl/PyKDL/frames.sip"
#include <kdl/frames.hpp>
#include <kdl/frames_io.hpp>
#include <sstream>
using namespace KDL;
#line 2361 "/home/mars/MarquetteRMC2021/ros_catkin_ws/build/python_orocos_kdl/PyKDL/sipPyKDLpart6.cpp"
#line 26 "/home/mars/MarquetteRMC2021/ros_catkin_ws/src/orocos_kinematics_dynamics/python_orocos_kdl/PyKDL/frames.sip"
#include <kdl/frames.hpp>
#include <kdl/frames_io.hpp>
#include <sstream>
using namespace KDL;
#line 2367 "/home/mars/MarquetteRMC2021/ros_catkin_ws/build/python_orocos_kdl/PyKDL/sipPyKDLpart6.cpp"
#line 281 "/home/mars/MarquetteRMC2021/ros_catkin_ws/src/orocos_kinematics_dynamics/python_orocos_kdl/PyKDL/frames.sip"
#include <kdl/frames.hpp>
#include <kdl/frames_io.hpp>
#include <sstream>
using namespace KDL;
#line 2373 "/home/mars/MarquetteRMC2021/ros_catkin_ws/build/python_orocos_kdl/PyKDL/sipPyKDLpart6.cpp"
#line 352 "/home/mars/MarquetteRMC2021/ros_catkin_ws/src/orocos_kinematics_dynamics/python_orocos_kdl/PyKDL/frames.sip"
#include <kdl/frames.hpp>
#include <kdl/frames_io.hpp>
#include <sstream>
using namespace KDL;
#line 2379 "/home/mars/MarquetteRMC2021/ros_catkin_ws/build/python_orocos_kdl/PyKDL/sipPyKDLpart6.cpp"
#line 81 "/home/mars/MarquetteRMC2021/ros_catkin_ws/src/orocos_kinematics_dynamics/python_orocos_kdl/PyKDL/kinfam.sip"
#include <kdl/rigidbodyinertia.hpp>
#include <kdl/kinfam_io.hpp>
using namespace KDL;
#line 2384 "/home/mars/MarquetteRMC2021/ros_catkin_ws/build/python_orocos_kdl/PyKDL/sipPyKDLpart6.cpp"
#line 159 "/home/mars/MarquetteRMC2021/ros_catkin_ws/src/orocos_kinematics_dynamics/python_orocos_kdl/PyKDL/framevel.sip"
#include <kdl/framevel.hpp>
using namespace KDL;
#line 2388 "/home/mars/MarquetteRMC2021/ros_catkin_ws/build/python_orocos_kdl/PyKDL/sipPyKDLpart6.cpp"
#line 21 "/home/mars/MarquetteRMC2021/ros_catkin_ws/src/orocos_kinematics_dynamics/python_orocos_kdl/PyKDL/std_string.sip"
#include <string>
#line 2391 "/home/mars/MarquetteRMC2021/ros_catkin_ws/build/python_orocos_kdl/PyKDL/sipPyKDLpart6.cpp"


PyDoc_STRVAR(doc_Frame_DH_Craig1989, "DH_Craig1989(self, a: float, alpha: float, d: float, theta: float) -> Frame");

extern "C" {static PyObject *meth_Frame_DH_Craig1989(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_Frame_DH_Craig1989(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        double a0;
        double a1;
        double a2;
        double a3;
         ::Frame *sipCpp;

        static const char *sipKwdList[] = {
            sipName_a,
            sipName_alpha,
            sipName_d,
            sipName_theta,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bdddd", &sipSelf, sipType_Frame, &sipCpp, &a0, &a1, &a2, &a3))
        {
             ::Frame*sipRes;

            sipRes = new  ::Frame(sipCpp->DH_Craig1989(a0,a1,a2,a3));

            return sipConvertFromNewType(sipRes,sipType_Frame,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Frame, sipName_DH_Craig1989, doc_Frame_DH_Craig1989);

    return NULL;
}


PyDoc_STRVAR(doc_Frame_DH, "DH(self, a: float, alpha: float, d: float, theta: float) -> Frame");

extern "C" {static PyObject *meth_Frame_DH(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_Frame_DH(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        double a0;
        double a1;
        double a2;
        double a3;
         ::Frame *sipCpp;

        static const char *sipKwdList[] = {
            sipName_a,
            sipName_alpha,
            sipName_d,
            sipName_theta,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bdddd", &sipSelf, sipType_Frame, &sipCpp, &a0, &a1, &a2, &a3))
        {
             ::Frame*sipRes;

            sipRes = new  ::Frame(sipCpp->DH(a0,a1,a2,a3));

            return sipConvertFromNewType(sipRes,sipType_Frame,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Frame, sipName_DH, doc_Frame_DH);

    return NULL;
}


PyDoc_STRVAR(doc_Frame_Inverse, "Inverse(self) -> Frame\n"
"Inverse(self, arg: Vector) -> Vector\n"
"Inverse(self, arg: Wrench) -> Wrench\n"
"Inverse(self, arg: Twist) -> Twist");

extern "C" {static PyObject *meth_Frame_Inverse(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_Frame_Inverse(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::Frame *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_Frame, &sipCpp))
        {
             ::Frame*sipRes;

            sipRes = new  ::Frame(sipCpp->Inverse());

            return sipConvertFromNewType(sipRes,sipType_Frame,NULL);
        }
    }

    {
        const  ::Vector* a0;
        const  ::Frame *sipCpp;

        static const char *sipKwdList[] = {
            sipName_arg,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9", &sipSelf, sipType_Frame, &sipCpp, sipType_Vector, &a0))
        {
             ::Vector*sipRes;

            sipRes = new  ::Vector(sipCpp->Inverse(*a0));

            return sipConvertFromNewType(sipRes,sipType_Vector,NULL);
        }
    }

    {
        const  ::Wrench* a0;
        const  ::Frame *sipCpp;

        static const char *sipKwdList[] = {
            sipName_arg,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9", &sipSelf, sipType_Frame, &sipCpp, sipType_Wrench, &a0))
        {
             ::Wrench*sipRes;

            sipRes = new  ::Wrench(sipCpp->Inverse(*a0));

            return sipConvertFromNewType(sipRes,sipType_Wrench,NULL);
        }
    }

    {
        const  ::Twist* a0;
        const  ::Frame *sipCpp;

        static const char *sipKwdList[] = {
            sipName_arg,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9", &sipSelf, sipType_Frame, &sipCpp, sipType_Twist, &a0))
        {
             ::Twist*sipRes;

            sipRes = new  ::Twist(sipCpp->Inverse(*a0));

            return sipConvertFromNewType(sipRes,sipType_Twist,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Frame, sipName_Inverse, doc_Frame_Inverse);

    return NULL;
}


PyDoc_STRVAR(doc_Frame_Identity, "Identity() -> Frame");

extern "C" {static PyObject *meth_Frame_Identity(PyObject *, PyObject *);}
static PyObject *meth_Frame_Identity(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::Frame*sipRes;

            sipRes = new  ::Frame( ::Frame::Identity());

            return sipConvertFromNewType(sipRes,sipType_Frame,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Frame, sipName_Identity, doc_Frame_Identity);

    return NULL;
}


PyDoc_STRVAR(doc_Frame_Integrate, "Integrate(self, t_this: Twist, frequency: float)");

extern "C" {static PyObject *meth_Frame_Integrate(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_Frame_Integrate(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::Twist* a0;
        double a1;
         ::Frame *sipCpp;

        static const char *sipKwdList[] = {
            sipName_t_this,
            sipName_frequency,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9d", &sipSelf, sipType_Frame, &sipCpp, sipType_Twist, &a0, &a1))
        {
            sipCpp->Integrate(*a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Frame, sipName_Integrate, doc_Frame_Integrate);

    return NULL;
}


extern "C" {static PyObject *slot_Frame___eq__(PyObject *,PyObject *);}
static PyObject *slot_Frame___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::Frame *sipCpp = reinterpret_cast< ::Frame *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Frame));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const  ::Frame* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_Frame, &a0))
        {
            bool sipRes;

            sipRes = operator==((*sipCpp), *a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_PyKDL, eq_slot, sipType_Frame, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_Frame___ne__(PyObject *,PyObject *);}
static PyObject *slot_Frame___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::Frame *sipCpp = reinterpret_cast< ::Frame *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Frame));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const  ::Frame* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_Frame, &a0))
        {
            bool sipRes;

            sipRes = operator!=((*sipCpp), *a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_PyKDL, ne_slot, sipType_Frame, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_Frame___mul__(PyObject *,PyObject *);}
static PyObject *slot_Frame___mul__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = NULL;

    {
         ::Frame* a0;
        const  ::Vector* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_Frame, &a0, sipType_Vector, &a1))
        {
             ::Vector*sipRes;

            sipRes = new  ::Vector((*a0 * *a1));

            return sipConvertFromNewType(sipRes,sipType_Vector,NULL);
        }
    }

    {
         ::Frame* a0;
        const  ::Wrench* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_Frame, &a0, sipType_Wrench, &a1))
        {
             ::Wrench*sipRes;

            sipRes = new  ::Wrench((*a0 * *a1));

            return sipConvertFromNewType(sipRes,sipType_Wrench,NULL);
        }
    }

    {
         ::Frame* a0;
        const  ::Twist* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_Frame, &a0, sipType_Twist, &a1))
        {
             ::Twist*sipRes;

            sipRes = new  ::Twist((*a0 * *a1));

            return sipConvertFromNewType(sipRes,sipType_Twist,NULL);
        }
    }

    {
        const  ::Frame* a0;
        const  ::Frame* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_Frame, &a0, sipType_Frame, &a1))
        {
             ::Frame*sipRes;

            sipRes = new  ::Frame((*a0 * *a1));

            return sipConvertFromNewType(sipRes,sipType_Frame,NULL);
        }
    }

    {
        const  ::Frame* a0;
        const  ::RigidBodyInertia* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_Frame, &a0, sipType_RigidBodyInertia, &a1))
        {
             ::RigidBodyInertia*sipRes;

            sipRes = new  ::RigidBodyInertia((*a0 * *a1));

            return sipConvertFromNewType(sipRes,sipType_RigidBodyInertia,NULL);
        }
    }

    {
        const  ::Frame* a0;
        const  ::FrameVel* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_Frame, &a0, sipType_FrameVel, &a1))
        {
             ::FrameVel*sipRes;

            sipRes = new  ::FrameVel((*a0 * *a1));

            return sipConvertFromNewType(sipRes,sipType_FrameVel,NULL);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_PyKDL, mul_slot, NULL, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_Frame___repr__(PyObject *);}
static PyObject *slot_Frame___repr__(PyObject *sipSelf)
{
     ::Frame *sipCpp = reinterpret_cast< ::Frame *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Frame));

    if (!sipCpp)
        return 0;


    {
        {
            const  ::std::string*sipRes = 0;

#line 243 "/home/mars/MarquetteRMC2021/ros_catkin_ws/src/orocos_kinematics_dynamics/python_orocos_kdl/PyKDL/frames.sip"
    std::ostringstream oss;
    oss<<(*sipCpp);
    std::string s(oss.str());
    sipRes=&s;
#line 2800 "/home/mars/MarquetteRMC2021/ros_catkin_ws/build/python_orocos_kdl/PyKDL/sipPyKDLpart6.cpp"

            return sipConvertFromType(const_cast< ::std::string *>(sipRes),sipType_std_string,NULL);
        }
    }

    return 0;
}


extern "C" {static int slot_Frame___setitem__(PyObject *,PyObject *);}
static int slot_Frame___setitem__(PyObject *sipSelf,PyObject *sipArgs)
{
     ::Frame *sipCpp = reinterpret_cast< ::Frame *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Frame));

    if (!sipCpp)
        return -1;

    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        double a1;

        if (sipParseArgs(&sipParseErr, sipArgs, "Td", &PyTuple_Type, &a0, &a1))
        {
#line 229 "/home/mars/MarquetteRMC2021/ros_catkin_ws/src/orocos_kinematics_dynamics/python_orocos_kdl/PyKDL/frames.sip"
    int i,j;
    PyArg_ParseTuple(a0,"ii",&i,&j);
    if (i < 0 || j < 0 || i > 2 || j > 3) {
        PyErr_SetString(PyExc_IndexError, "Frame index out of range");
        return 0;
    }
    if(j==3)
        (*sipCpp).p(i)=a1;
    else
        (*sipCpp).M(i,j)=a1;
#line 2837 "/home/mars/MarquetteRMC2021/ros_catkin_ws/build/python_orocos_kdl/PyKDL/sipPyKDLpart6.cpp"

            return 0;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Frame, sipName___setitem__, NULL);

    return -1;
}


extern "C" {static PyObject *slot_Frame___getitem__(PyObject *,PyObject *);}
static PyObject *slot_Frame___getitem__(PyObject *sipSelf,PyObject *sipArg)
{
     ::Frame *sipCpp = reinterpret_cast< ::Frame *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Frame));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1T", &PyTuple_Type, &a0))
        {
            double sipRes = 0;

#line 218 "/home/mars/MarquetteRMC2021/ros_catkin_ws/src/orocos_kinematics_dynamics/python_orocos_kdl/PyKDL/frames.sip"
    int i,j;
    PyArg_ParseTuple(a0,"ii",&i,&j);
    if (i < 0 || j < 0 || i > 2 || j > 3) {
        PyErr_SetString(PyExc_IndexError, "Frame index out of range");
        return 0;
    }
    sipRes=(*sipCpp)(i,j);
#line 2875 "/home/mars/MarquetteRMC2021/ros_catkin_ws/build/python_orocos_kdl/PyKDL/sipPyKDLpart6.cpp"

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Frame, sipName___getitem__, NULL);

    return 0;
}


/* Call the instance's destructor. */
extern "C" {static void release_Frame(void *, int);}
static void release_Frame(void *sipCppV, int)
{
    delete reinterpret_cast< ::Frame *>(sipCppV);
}


extern "C" {static PyObject *pickle_Frame(void *);}
static PyObject *pickle_Frame(void *sipCppV)
{
     ::Frame *sipCpp = reinterpret_cast< ::Frame *>(sipCppV);
    PyObject *sipRes;

#line 265 "/home/mars/MarquetteRMC2021/ros_catkin_ws/src/orocos_kinematics_dynamics/python_orocos_kdl/PyKDL/frames.sip"
    const sipTypeDef *vector_type = sipFindType("Vector");
    const sipTypeDef *rotation_type = sipFindType("Rotation");
    sipRes = Py_BuildValue("OO", sipConvertFromType(&(sipCpp->M), rotation_type, Py_None),
                                 sipConvertFromType(&(sipCpp->p), vector_type, Py_None));
#line 2907 "/home/mars/MarquetteRMC2021/ros_catkin_ws/build/python_orocos_kdl/PyKDL/sipPyKDLpart6.cpp"

    return sipRes;
}


extern "C" {static void assign_Frame(void *, SIP_SSIZE_T, void *);}
static void assign_Frame(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::Frame *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::Frame *>(sipSrc);
}


extern "C" {static void *array_Frame(SIP_SSIZE_T);}
static void *array_Frame(SIP_SSIZE_T sipNrElem)
{
    return new  ::Frame[sipNrElem];
}


extern "C" {static void *copy_Frame(const void *, SIP_SSIZE_T);}
static void *copy_Frame(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::Frame(reinterpret_cast<const  ::Frame *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_Frame(sipSimpleWrapper *);}
static void dealloc_Frame(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_Frame(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_Frame(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_Frame(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::Frame *sipCpp = 0;

    {
        const  ::Rotation* a0;
        const  ::Vector* a1;

        static const char *sipKwdList[] = {
            sipName_R,
            sipName_V,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J9J9", sipType_Rotation, &a0, sipType_Vector, &a1))
        {
            sipCpp = new  ::Frame(*a0,*a1);

            return sipCpp;
        }
    }

    {
        const  ::Vector* a0;

        static const char *sipKwdList[] = {
            sipName_V,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J9", sipType_Vector, &a0))
        {
            sipCpp = new  ::Frame(*a0);

            return sipCpp;
        }
    }

    {
        const  ::Rotation* a0;

        static const char *sipKwdList[] = {
            sipName_R,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J9", sipType_Rotation, &a0))
        {
            sipCpp = new  ::Frame(*a0);

            return sipCpp;
        }
    }

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            sipCpp = new  ::Frame();

            return sipCpp;
        }
    }

    {
        const  ::Frame* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_Frame, &a0))
        {
            sipCpp = new  ::Frame(*a0);

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_Frame[] = {
    {(void *)slot_Frame___eq__, eq_slot},
    {(void *)slot_Frame___ne__, ne_slot},
    {(void *)slot_Frame___mul__, mul_slot},
    {(void *)slot_Frame___repr__, repr_slot},
    {(void *)slot_Frame___setitem__, setitem_slot},
    {(void *)slot_Frame___getitem__, getitem_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_Frame[] = {
    {SIP_MLNAME_CAST(sipName_DH), (PyCFunction)meth_Frame_DH, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_Frame_DH)},
    {SIP_MLNAME_CAST(sipName_DH_Craig1989), (PyCFunction)meth_Frame_DH_Craig1989, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_Frame_DH_Craig1989)},
    {SIP_MLNAME_CAST(sipName_Identity), meth_Frame_Identity, METH_VARARGS, SIP_MLDOC_CAST(doc_Frame_Identity)},
    {SIP_MLNAME_CAST(sipName_Integrate), (PyCFunction)meth_Frame_Integrate, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_Frame_Integrate)},
    {SIP_MLNAME_CAST(sipName_Inverse), (PyCFunction)meth_Frame_Inverse, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_Frame_Inverse)}
};


extern "C" {static PyObject *varget_Frame_M(void *, PyObject *, PyObject *);}
static PyObject *varget_Frame_M(void *sipSelf, PyObject *sipPySelf, PyObject *)
{
    PyObject *sipPy;
     ::Rotation*sipVal;
     ::Frame *sipCpp = reinterpret_cast< ::Frame *>(sipSelf);

    sipPy = sipGetReference(sipPySelf, -30);

    if (sipPy)
        return sipPy;

    sipVal = &sipCpp->M;

    sipPy = sipConvertFromType(sipVal, sipType_Rotation, NULL);

    if (sipPy)
    {
        sipKeepReference(sipPy, -29, sipPySelf);
        sipKeepReference(sipPySelf, -30, sipPy);
    }

    return sipPy;
}


extern "C" {static int varset_Frame_M(void *, PyObject *, PyObject *);}
static int varset_Frame_M(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::Rotation*sipVal;
     ::Frame *sipCpp = reinterpret_cast< ::Frame *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::Rotation *>(sipForceConvertToType(sipPy,sipType_Rotation,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->M = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_Frame_p(void *, PyObject *, PyObject *);}
static PyObject *varget_Frame_p(void *sipSelf, PyObject *sipPySelf, PyObject *)
{
    PyObject *sipPy;
     ::Vector*sipVal;
     ::Frame *sipCpp = reinterpret_cast< ::Frame *>(sipSelf);

    sipPy = sipGetReference(sipPySelf, -32);

    if (sipPy)
        return sipPy;

    sipVal = &sipCpp->p;

    sipPy = sipConvertFromType(sipVal, sipType_Vector, NULL);

    if (sipPy)
    {
        sipKeepReference(sipPy, -31, sipPySelf);
        sipKeepReference(sipPySelf, -32, sipPy);
    }

    return sipPy;
}


extern "C" {static int varset_Frame_p(void *, PyObject *, PyObject *);}
static int varset_Frame_p(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::Vector*sipVal;
     ::Frame *sipCpp = reinterpret_cast< ::Frame *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::Vector *>(sipForceConvertToType(sipPy,sipType_Vector,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->p = *sipVal;

    return 0;
}

sipVariableDef variables_Frame[] = {
    {InstanceVariable, sipName_M, (PyMethodDef *)varget_Frame_M, (PyMethodDef *)varset_Frame_M, NULL, NULL},
    {InstanceVariable, sipName_p, (PyMethodDef *)varget_Frame_p, (PyMethodDef *)varset_Frame_p, NULL, NULL},
};

PyDoc_STRVAR(doc_Frame, "\1Frame(R: Rotation, V: Vector)\n"
"Frame(V: Vector)\n"
"Frame(R: Rotation)\n"
"Frame()\n"
"Frame(Frame)");


sipClassTypeDef sipTypeDef_PyKDL_Frame = {
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_Frame,
        {0},
        0
    },
    {
        sipNameNr_Frame,
        {0, 0, 1},
        5, methods_Frame,
        0, 0,
        2, variables_Frame,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_Frame,
    -1,
    -1,
    0,
    slots_Frame,
    init_type_Frame,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_Frame,
    assign_Frame,
    array_Frame,
    copy_Frame,
    release_Frame,
    0,
    0,
    0,
    0,
    pickle_Frame,
    0,
    0
};
