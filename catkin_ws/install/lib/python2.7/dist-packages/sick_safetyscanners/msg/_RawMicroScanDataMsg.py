# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from sick_safetyscanners/RawMicroScanDataMsg.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import sick_safetyscanners.msg

class RawMicroScanDataMsg(genpy.Message):
  _md5sum = "5fc254cfba77c4b6406f3301d7d54b81"
  _type = "sick_safetyscanners/RawMicroScanDataMsg"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """DataHeaderMsg header
DerivedValuesMsg derived_values
GeneralSystemStateMsg general_system_state
MeasurementDataMsg measurement_data
IntrusionDataMsg intrusion_data
ApplicationDataMsg application_data

================================================================================
MSG: sick_safetyscanners/DataHeaderMsg
uint8 version_version
uint8 version_major_version
uint8 version_minor_version
uint8 version_release

uint32 serial_number_of_device
uint32 serial_number_of_channel_plug
uint8 channel_number

uint32 sequence_number
uint32 scan_number

uint16 timestamp_date
uint32 timestamp_time

================================================================================
MSG: sick_safetyscanners/DerivedValuesMsg
uint16 multiplication_factor
uint16 number_of_beams
uint16 scan_time
float32 start_angle
float32 angular_beam_resolution
uint32 interbeam_period

================================================================================
MSG: sick_safetyscanners/GeneralSystemStateMsg
bool run_mode_active
bool standby_mode_active
bool contamination_warning
bool contamination_error
bool reference_contour_status
bool manipulation_status

bool[] safe_cut_off_path
bool[] non_safe_cut_off_path
bool[] reset_required_cut_off_path

uint8 current_monitoring_case_no_table_1
uint8 current_monitoring_case_no_table_2
uint8 current_monitoring_case_no_table_3
uint8 current_monitoring_case_no_table_4

bool application_error
bool device_error

================================================================================
MSG: sick_safetyscanners/MeasurementDataMsg
uint32 number_of_beams
ScanPointMsg[] scan_points


================================================================================
MSG: sick_safetyscanners/ScanPointMsg
float32 angle
uint16 distance
uint8 reflectivity
bool valid
bool infinite
bool glare
bool reflector
bool contamination
bool contamination_warning

================================================================================
MSG: sick_safetyscanners/IntrusionDataMsg
IntrusionDatumMsg[] data

================================================================================
MSG: sick_safetyscanners/IntrusionDatumMsg
uint32 size
bool[] flags

================================================================================
MSG: sick_safetyscanners/ApplicationDataMsg
ApplicationInputsMsg inputs
ApplicationOutputsMsg outputs

================================================================================
MSG: sick_safetyscanners/ApplicationInputsMsg
bool[] unsafe_inputs_input_sources
bool[] unsafe_inputs_flags

uint16[] monitoring_case_number_inputs
bool[] monitoring_case_number_inputs_flags

int16 linear_velocity_inputs_velocity_0
bool linear_velocity_inputs_velocity_0_valid
bool linear_velocity_inputs_velocity_0_transmitted_safely

int16 linear_velocity_inputs_velocity_1
bool linear_velocity_inputs_velocity_1_valid
bool linear_velocity_inputs_velocity_1_transmitted_safely

uint8 sleep_mode_input


================================================================================
MSG: sick_safetyscanners/ApplicationOutputsMsg
bool[] evaluation_path_outputs_eval_out
bool[] evaluation_path_outputs_is_safe
bool[] evaluation_path_outputs_is_valid

uint16[] monitoring_case_number_outputs 
bool[] monitoring_case_number_outputs_flags

uint8 sleep_mode_output
bool sleep_mode_output_valid

bool error_flag_contamination_warning
bool error_flag_contamination_error
bool error_flag_manipulation_error
bool error_flag_glare
bool error_flag_reference_contour_intruded
bool error_flag_critical_error
bool error_flags_are_valid


int16 linear_velocity_outputs_velocity_0
bool linear_velocity_outputs_velocity_0_valid
bool linear_velocity_outputs_velocity_0_transmitted_safely

int16 linear_velocity_outputs_velocity_1
bool linear_velocity_outputs_velocity_1_valid
bool linear_velocity_outputs_velocity_1_transmitted_safely

int16[] resulting_velocity
bool[] resulting_velocity_flags

 
"""
  __slots__ = ['header','derived_values','general_system_state','measurement_data','intrusion_data','application_data']
  _slot_types = ['sick_safetyscanners/DataHeaderMsg','sick_safetyscanners/DerivedValuesMsg','sick_safetyscanners/GeneralSystemStateMsg','sick_safetyscanners/MeasurementDataMsg','sick_safetyscanners/IntrusionDataMsg','sick_safetyscanners/ApplicationDataMsg']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,derived_values,general_system_state,measurement_data,intrusion_data,application_data

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RawMicroScanDataMsg, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = sick_safetyscanners.msg.DataHeaderMsg()
      if self.derived_values is None:
        self.derived_values = sick_safetyscanners.msg.DerivedValuesMsg()
      if self.general_system_state is None:
        self.general_system_state = sick_safetyscanners.msg.GeneralSystemStateMsg()
      if self.measurement_data is None:
        self.measurement_data = sick_safetyscanners.msg.MeasurementDataMsg()
      if self.intrusion_data is None:
        self.intrusion_data = sick_safetyscanners.msg.IntrusionDataMsg()
      if self.application_data is None:
        self.application_data = sick_safetyscanners.msg.ApplicationDataMsg()
    else:
      self.header = sick_safetyscanners.msg.DataHeaderMsg()
      self.derived_values = sick_safetyscanners.msg.DerivedValuesMsg()
      self.general_system_state = sick_safetyscanners.msg.GeneralSystemStateMsg()
      self.measurement_data = sick_safetyscanners.msg.MeasurementDataMsg()
      self.intrusion_data = sick_safetyscanners.msg.IntrusionDataMsg()
      self.application_data = sick_safetyscanners.msg.ApplicationDataMsg()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_4B2IB2IHI3H2fI6B().pack(_x.header.version_version, _x.header.version_major_version, _x.header.version_minor_version, _x.header.version_release, _x.header.serial_number_of_device, _x.header.serial_number_of_channel_plug, _x.header.channel_number, _x.header.sequence_number, _x.header.scan_number, _x.header.timestamp_date, _x.header.timestamp_time, _x.derived_values.multiplication_factor, _x.derived_values.number_of_beams, _x.derived_values.scan_time, _x.derived_values.start_angle, _x.derived_values.angular_beam_resolution, _x.derived_values.interbeam_period, _x.general_system_state.run_mode_active, _x.general_system_state.standby_mode_active, _x.general_system_state.contamination_warning, _x.general_system_state.contamination_error, _x.general_system_state.reference_contour_status, _x.general_system_state.manipulation_status))
      length = len(self.general_system_state.safe_cut_off_path)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(struct.Struct(pattern).pack(*self.general_system_state.safe_cut_off_path))
      length = len(self.general_system_state.non_safe_cut_off_path)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(struct.Struct(pattern).pack(*self.general_system_state.non_safe_cut_off_path))
      length = len(self.general_system_state.reset_required_cut_off_path)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(struct.Struct(pattern).pack(*self.general_system_state.reset_required_cut_off_path))
      _x = self
      buff.write(_get_struct_6BI().pack(_x.general_system_state.current_monitoring_case_no_table_1, _x.general_system_state.current_monitoring_case_no_table_2, _x.general_system_state.current_monitoring_case_no_table_3, _x.general_system_state.current_monitoring_case_no_table_4, _x.general_system_state.application_error, _x.general_system_state.device_error, _x.measurement_data.number_of_beams))
      length = len(self.measurement_data.scan_points)
      buff.write(_struct_I.pack(length))
      for val1 in self.measurement_data.scan_points:
        _x = val1
        buff.write(_get_struct_fH7B().pack(_x.angle, _x.distance, _x.reflectivity, _x.valid, _x.infinite, _x.glare, _x.reflector, _x.contamination, _x.contamination_warning))
      length = len(self.intrusion_data.data)
      buff.write(_struct_I.pack(length))
      for val1 in self.intrusion_data.data:
        _x = val1.size
        buff.write(_get_struct_I().pack(_x))
        length = len(val1.flags)
        buff.write(_struct_I.pack(length))
        pattern = '<%sB'%length
        buff.write(struct.Struct(pattern).pack(*val1.flags))
      length = len(self.application_data.inputs.unsafe_inputs_input_sources)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(struct.Struct(pattern).pack(*self.application_data.inputs.unsafe_inputs_input_sources))
      length = len(self.application_data.inputs.unsafe_inputs_flags)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(struct.Struct(pattern).pack(*self.application_data.inputs.unsafe_inputs_flags))
      length = len(self.application_data.inputs.monitoring_case_number_inputs)
      buff.write(_struct_I.pack(length))
      pattern = '<%sH'%length
      buff.write(struct.Struct(pattern).pack(*self.application_data.inputs.monitoring_case_number_inputs))
      length = len(self.application_data.inputs.monitoring_case_number_inputs_flags)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(struct.Struct(pattern).pack(*self.application_data.inputs.monitoring_case_number_inputs_flags))
      _x = self
      buff.write(_get_struct_h2Bh3B().pack(_x.application_data.inputs.linear_velocity_inputs_velocity_0, _x.application_data.inputs.linear_velocity_inputs_velocity_0_valid, _x.application_data.inputs.linear_velocity_inputs_velocity_0_transmitted_safely, _x.application_data.inputs.linear_velocity_inputs_velocity_1, _x.application_data.inputs.linear_velocity_inputs_velocity_1_valid, _x.application_data.inputs.linear_velocity_inputs_velocity_1_transmitted_safely, _x.application_data.inputs.sleep_mode_input))
      length = len(self.application_data.outputs.evaluation_path_outputs_eval_out)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(struct.Struct(pattern).pack(*self.application_data.outputs.evaluation_path_outputs_eval_out))
      length = len(self.application_data.outputs.evaluation_path_outputs_is_safe)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(struct.Struct(pattern).pack(*self.application_data.outputs.evaluation_path_outputs_is_safe))
      length = len(self.application_data.outputs.evaluation_path_outputs_is_valid)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(struct.Struct(pattern).pack(*self.application_data.outputs.evaluation_path_outputs_is_valid))
      length = len(self.application_data.outputs.monitoring_case_number_outputs)
      buff.write(_struct_I.pack(length))
      pattern = '<%sH'%length
      buff.write(struct.Struct(pattern).pack(*self.application_data.outputs.monitoring_case_number_outputs))
      length = len(self.application_data.outputs.monitoring_case_number_outputs_flags)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(struct.Struct(pattern).pack(*self.application_data.outputs.monitoring_case_number_outputs_flags))
      _x = self
      buff.write(_get_struct_9Bh2Bh2B().pack(_x.application_data.outputs.sleep_mode_output, _x.application_data.outputs.sleep_mode_output_valid, _x.application_data.outputs.error_flag_contamination_warning, _x.application_data.outputs.error_flag_contamination_error, _x.application_data.outputs.error_flag_manipulation_error, _x.application_data.outputs.error_flag_glare, _x.application_data.outputs.error_flag_reference_contour_intruded, _x.application_data.outputs.error_flag_critical_error, _x.application_data.outputs.error_flags_are_valid, _x.application_data.outputs.linear_velocity_outputs_velocity_0, _x.application_data.outputs.linear_velocity_outputs_velocity_0_valid, _x.application_data.outputs.linear_velocity_outputs_velocity_0_transmitted_safely, _x.application_data.outputs.linear_velocity_outputs_velocity_1, _x.application_data.outputs.linear_velocity_outputs_velocity_1_valid, _x.application_data.outputs.linear_velocity_outputs_velocity_1_transmitted_safely))
      length = len(self.application_data.outputs.resulting_velocity)
      buff.write(_struct_I.pack(length))
      pattern = '<%sh'%length
      buff.write(struct.Struct(pattern).pack(*self.application_data.outputs.resulting_velocity))
      length = len(self.application_data.outputs.resulting_velocity_flags)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(struct.Struct(pattern).pack(*self.application_data.outputs.resulting_velocity_flags))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = sick_safetyscanners.msg.DataHeaderMsg()
      if self.derived_values is None:
        self.derived_values = sick_safetyscanners.msg.DerivedValuesMsg()
      if self.general_system_state is None:
        self.general_system_state = sick_safetyscanners.msg.GeneralSystemStateMsg()
      if self.measurement_data is None:
        self.measurement_data = sick_safetyscanners.msg.MeasurementDataMsg()
      if self.intrusion_data is None:
        self.intrusion_data = sick_safetyscanners.msg.IntrusionDataMsg()
      if self.application_data is None:
        self.application_data = sick_safetyscanners.msg.ApplicationDataMsg()
      end = 0
      _x = self
      start = end
      end += 51
      (_x.header.version_version, _x.header.version_major_version, _x.header.version_minor_version, _x.header.version_release, _x.header.serial_number_of_device, _x.header.serial_number_of_channel_plug, _x.header.channel_number, _x.header.sequence_number, _x.header.scan_number, _x.header.timestamp_date, _x.header.timestamp_time, _x.derived_values.multiplication_factor, _x.derived_values.number_of_beams, _x.derived_values.scan_time, _x.derived_values.start_angle, _x.derived_values.angular_beam_resolution, _x.derived_values.interbeam_period, _x.general_system_state.run_mode_active, _x.general_system_state.standby_mode_active, _x.general_system_state.contamination_warning, _x.general_system_state.contamination_error, _x.general_system_state.reference_contour_status, _x.general_system_state.manipulation_status,) = _get_struct_4B2IB2IHI3H2fI6B().unpack(str[start:end])
      self.general_system_state.run_mode_active = bool(self.general_system_state.run_mode_active)
      self.general_system_state.standby_mode_active = bool(self.general_system_state.standby_mode_active)
      self.general_system_state.contamination_warning = bool(self.general_system_state.contamination_warning)
      self.general_system_state.contamination_error = bool(self.general_system_state.contamination_error)
      self.general_system_state.reference_contour_status = bool(self.general_system_state.reference_contour_status)
      self.general_system_state.manipulation_status = bool(self.general_system_state.manipulation_status)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.general_system_state.safe_cut_off_path = s.unpack(str[start:end])
      self.general_system_state.safe_cut_off_path = list(map(bool, self.general_system_state.safe_cut_off_path))
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.general_system_state.non_safe_cut_off_path = s.unpack(str[start:end])
      self.general_system_state.non_safe_cut_off_path = list(map(bool, self.general_system_state.non_safe_cut_off_path))
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.general_system_state.reset_required_cut_off_path = s.unpack(str[start:end])
      self.general_system_state.reset_required_cut_off_path = list(map(bool, self.general_system_state.reset_required_cut_off_path))
      _x = self
      start = end
      end += 10
      (_x.general_system_state.current_monitoring_case_no_table_1, _x.general_system_state.current_monitoring_case_no_table_2, _x.general_system_state.current_monitoring_case_no_table_3, _x.general_system_state.current_monitoring_case_no_table_4, _x.general_system_state.application_error, _x.general_system_state.device_error, _x.measurement_data.number_of_beams,) = _get_struct_6BI().unpack(str[start:end])
      self.general_system_state.application_error = bool(self.general_system_state.application_error)
      self.general_system_state.device_error = bool(self.general_system_state.device_error)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.measurement_data.scan_points = []
      for i in range(0, length):
        val1 = sick_safetyscanners.msg.ScanPointMsg()
        _x = val1
        start = end
        end += 13
        (_x.angle, _x.distance, _x.reflectivity, _x.valid, _x.infinite, _x.glare, _x.reflector, _x.contamination, _x.contamination_warning,) = _get_struct_fH7B().unpack(str[start:end])
        val1.valid = bool(val1.valid)
        val1.infinite = bool(val1.infinite)
        val1.glare = bool(val1.glare)
        val1.reflector = bool(val1.reflector)
        val1.contamination = bool(val1.contamination)
        val1.contamination_warning = bool(val1.contamination_warning)
        self.measurement_data.scan_points.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.intrusion_data.data = []
      for i in range(0, length):
        val1 = sick_safetyscanners.msg.IntrusionDatumMsg()
        start = end
        end += 4
        (val1.size,) = _get_struct_I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sB'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.flags = s.unpack(str[start:end])
        val1.flags = list(map(bool, val1.flags))
        self.intrusion_data.data.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.application_data.inputs.unsafe_inputs_input_sources = s.unpack(str[start:end])
      self.application_data.inputs.unsafe_inputs_input_sources = list(map(bool, self.application_data.inputs.unsafe_inputs_input_sources))
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.application_data.inputs.unsafe_inputs_flags = s.unpack(str[start:end])
      self.application_data.inputs.unsafe_inputs_flags = list(map(bool, self.application_data.inputs.unsafe_inputs_flags))
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sH'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.application_data.inputs.monitoring_case_number_inputs = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.application_data.inputs.monitoring_case_number_inputs_flags = s.unpack(str[start:end])
      self.application_data.inputs.monitoring_case_number_inputs_flags = list(map(bool, self.application_data.inputs.monitoring_case_number_inputs_flags))
      _x = self
      start = end
      end += 9
      (_x.application_data.inputs.linear_velocity_inputs_velocity_0, _x.application_data.inputs.linear_velocity_inputs_velocity_0_valid, _x.application_data.inputs.linear_velocity_inputs_velocity_0_transmitted_safely, _x.application_data.inputs.linear_velocity_inputs_velocity_1, _x.application_data.inputs.linear_velocity_inputs_velocity_1_valid, _x.application_data.inputs.linear_velocity_inputs_velocity_1_transmitted_safely, _x.application_data.inputs.sleep_mode_input,) = _get_struct_h2Bh3B().unpack(str[start:end])
      self.application_data.inputs.linear_velocity_inputs_velocity_0_valid = bool(self.application_data.inputs.linear_velocity_inputs_velocity_0_valid)
      self.application_data.inputs.linear_velocity_inputs_velocity_0_transmitted_safely = bool(self.application_data.inputs.linear_velocity_inputs_velocity_0_transmitted_safely)
      self.application_data.inputs.linear_velocity_inputs_velocity_1_valid = bool(self.application_data.inputs.linear_velocity_inputs_velocity_1_valid)
      self.application_data.inputs.linear_velocity_inputs_velocity_1_transmitted_safely = bool(self.application_data.inputs.linear_velocity_inputs_velocity_1_transmitted_safely)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.application_data.outputs.evaluation_path_outputs_eval_out = s.unpack(str[start:end])
      self.application_data.outputs.evaluation_path_outputs_eval_out = list(map(bool, self.application_data.outputs.evaluation_path_outputs_eval_out))
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.application_data.outputs.evaluation_path_outputs_is_safe = s.unpack(str[start:end])
      self.application_data.outputs.evaluation_path_outputs_is_safe = list(map(bool, self.application_data.outputs.evaluation_path_outputs_is_safe))
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.application_data.outputs.evaluation_path_outputs_is_valid = s.unpack(str[start:end])
      self.application_data.outputs.evaluation_path_outputs_is_valid = list(map(bool, self.application_data.outputs.evaluation_path_outputs_is_valid))
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sH'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.application_data.outputs.monitoring_case_number_outputs = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.application_data.outputs.monitoring_case_number_outputs_flags = s.unpack(str[start:end])
      self.application_data.outputs.monitoring_case_number_outputs_flags = list(map(bool, self.application_data.outputs.monitoring_case_number_outputs_flags))
      _x = self
      start = end
      end += 17
      (_x.application_data.outputs.sleep_mode_output, _x.application_data.outputs.sleep_mode_output_valid, _x.application_data.outputs.error_flag_contamination_warning, _x.application_data.outputs.error_flag_contamination_error, _x.application_data.outputs.error_flag_manipulation_error, _x.application_data.outputs.error_flag_glare, _x.application_data.outputs.error_flag_reference_contour_intruded, _x.application_data.outputs.error_flag_critical_error, _x.application_data.outputs.error_flags_are_valid, _x.application_data.outputs.linear_velocity_outputs_velocity_0, _x.application_data.outputs.linear_velocity_outputs_velocity_0_valid, _x.application_data.outputs.linear_velocity_outputs_velocity_0_transmitted_safely, _x.application_data.outputs.linear_velocity_outputs_velocity_1, _x.application_data.outputs.linear_velocity_outputs_velocity_1_valid, _x.application_data.outputs.linear_velocity_outputs_velocity_1_transmitted_safely,) = _get_struct_9Bh2Bh2B().unpack(str[start:end])
      self.application_data.outputs.sleep_mode_output_valid = bool(self.application_data.outputs.sleep_mode_output_valid)
      self.application_data.outputs.error_flag_contamination_warning = bool(self.application_data.outputs.error_flag_contamination_warning)
      self.application_data.outputs.error_flag_contamination_error = bool(self.application_data.outputs.error_flag_contamination_error)
      self.application_data.outputs.error_flag_manipulation_error = bool(self.application_data.outputs.error_flag_manipulation_error)
      self.application_data.outputs.error_flag_glare = bool(self.application_data.outputs.error_flag_glare)
      self.application_data.outputs.error_flag_reference_contour_intruded = bool(self.application_data.outputs.error_flag_reference_contour_intruded)
      self.application_data.outputs.error_flag_critical_error = bool(self.application_data.outputs.error_flag_critical_error)
      self.application_data.outputs.error_flags_are_valid = bool(self.application_data.outputs.error_flags_are_valid)
      self.application_data.outputs.linear_velocity_outputs_velocity_0_valid = bool(self.application_data.outputs.linear_velocity_outputs_velocity_0_valid)
      self.application_data.outputs.linear_velocity_outputs_velocity_0_transmitted_safely = bool(self.application_data.outputs.linear_velocity_outputs_velocity_0_transmitted_safely)
      self.application_data.outputs.linear_velocity_outputs_velocity_1_valid = bool(self.application_data.outputs.linear_velocity_outputs_velocity_1_valid)
      self.application_data.outputs.linear_velocity_outputs_velocity_1_transmitted_safely = bool(self.application_data.outputs.linear_velocity_outputs_velocity_1_transmitted_safely)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sh'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.application_data.outputs.resulting_velocity = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.application_data.outputs.resulting_velocity_flags = s.unpack(str[start:end])
      self.application_data.outputs.resulting_velocity_flags = list(map(bool, self.application_data.outputs.resulting_velocity_flags))
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_4B2IB2IHI3H2fI6B().pack(_x.header.version_version, _x.header.version_major_version, _x.header.version_minor_version, _x.header.version_release, _x.header.serial_number_of_device, _x.header.serial_number_of_channel_plug, _x.header.channel_number, _x.header.sequence_number, _x.header.scan_number, _x.header.timestamp_date, _x.header.timestamp_time, _x.derived_values.multiplication_factor, _x.derived_values.number_of_beams, _x.derived_values.scan_time, _x.derived_values.start_angle, _x.derived_values.angular_beam_resolution, _x.derived_values.interbeam_period, _x.general_system_state.run_mode_active, _x.general_system_state.standby_mode_active, _x.general_system_state.contamination_warning, _x.general_system_state.contamination_error, _x.general_system_state.reference_contour_status, _x.general_system_state.manipulation_status))
      length = len(self.general_system_state.safe_cut_off_path)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(self.general_system_state.safe_cut_off_path.tostring())
      length = len(self.general_system_state.non_safe_cut_off_path)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(self.general_system_state.non_safe_cut_off_path.tostring())
      length = len(self.general_system_state.reset_required_cut_off_path)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(self.general_system_state.reset_required_cut_off_path.tostring())
      _x = self
      buff.write(_get_struct_6BI().pack(_x.general_system_state.current_monitoring_case_no_table_1, _x.general_system_state.current_monitoring_case_no_table_2, _x.general_system_state.current_monitoring_case_no_table_3, _x.general_system_state.current_monitoring_case_no_table_4, _x.general_system_state.application_error, _x.general_system_state.device_error, _x.measurement_data.number_of_beams))
      length = len(self.measurement_data.scan_points)
      buff.write(_struct_I.pack(length))
      for val1 in self.measurement_data.scan_points:
        _x = val1
        buff.write(_get_struct_fH7B().pack(_x.angle, _x.distance, _x.reflectivity, _x.valid, _x.infinite, _x.glare, _x.reflector, _x.contamination, _x.contamination_warning))
      length = len(self.intrusion_data.data)
      buff.write(_struct_I.pack(length))
      for val1 in self.intrusion_data.data:
        _x = val1.size
        buff.write(_get_struct_I().pack(_x))
        length = len(val1.flags)
        buff.write(_struct_I.pack(length))
        pattern = '<%sB'%length
        buff.write(val1.flags.tostring())
      length = len(self.application_data.inputs.unsafe_inputs_input_sources)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(self.application_data.inputs.unsafe_inputs_input_sources.tostring())
      length = len(self.application_data.inputs.unsafe_inputs_flags)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(self.application_data.inputs.unsafe_inputs_flags.tostring())
      length = len(self.application_data.inputs.monitoring_case_number_inputs)
      buff.write(_struct_I.pack(length))
      pattern = '<%sH'%length
      buff.write(self.application_data.inputs.monitoring_case_number_inputs.tostring())
      length = len(self.application_data.inputs.monitoring_case_number_inputs_flags)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(self.application_data.inputs.monitoring_case_number_inputs_flags.tostring())
      _x = self
      buff.write(_get_struct_h2Bh3B().pack(_x.application_data.inputs.linear_velocity_inputs_velocity_0, _x.application_data.inputs.linear_velocity_inputs_velocity_0_valid, _x.application_data.inputs.linear_velocity_inputs_velocity_0_transmitted_safely, _x.application_data.inputs.linear_velocity_inputs_velocity_1, _x.application_data.inputs.linear_velocity_inputs_velocity_1_valid, _x.application_data.inputs.linear_velocity_inputs_velocity_1_transmitted_safely, _x.application_data.inputs.sleep_mode_input))
      length = len(self.application_data.outputs.evaluation_path_outputs_eval_out)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(self.application_data.outputs.evaluation_path_outputs_eval_out.tostring())
      length = len(self.application_data.outputs.evaluation_path_outputs_is_safe)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(self.application_data.outputs.evaluation_path_outputs_is_safe.tostring())
      length = len(self.application_data.outputs.evaluation_path_outputs_is_valid)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(self.application_data.outputs.evaluation_path_outputs_is_valid.tostring())
      length = len(self.application_data.outputs.monitoring_case_number_outputs)
      buff.write(_struct_I.pack(length))
      pattern = '<%sH'%length
      buff.write(self.application_data.outputs.monitoring_case_number_outputs.tostring())
      length = len(self.application_data.outputs.monitoring_case_number_outputs_flags)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(self.application_data.outputs.monitoring_case_number_outputs_flags.tostring())
      _x = self
      buff.write(_get_struct_9Bh2Bh2B().pack(_x.application_data.outputs.sleep_mode_output, _x.application_data.outputs.sleep_mode_output_valid, _x.application_data.outputs.error_flag_contamination_warning, _x.application_data.outputs.error_flag_contamination_error, _x.application_data.outputs.error_flag_manipulation_error, _x.application_data.outputs.error_flag_glare, _x.application_data.outputs.error_flag_reference_contour_intruded, _x.application_data.outputs.error_flag_critical_error, _x.application_data.outputs.error_flags_are_valid, _x.application_data.outputs.linear_velocity_outputs_velocity_0, _x.application_data.outputs.linear_velocity_outputs_velocity_0_valid, _x.application_data.outputs.linear_velocity_outputs_velocity_0_transmitted_safely, _x.application_data.outputs.linear_velocity_outputs_velocity_1, _x.application_data.outputs.linear_velocity_outputs_velocity_1_valid, _x.application_data.outputs.linear_velocity_outputs_velocity_1_transmitted_safely))
      length = len(self.application_data.outputs.resulting_velocity)
      buff.write(_struct_I.pack(length))
      pattern = '<%sh'%length
      buff.write(self.application_data.outputs.resulting_velocity.tostring())
      length = len(self.application_data.outputs.resulting_velocity_flags)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(self.application_data.outputs.resulting_velocity_flags.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = sick_safetyscanners.msg.DataHeaderMsg()
      if self.derived_values is None:
        self.derived_values = sick_safetyscanners.msg.DerivedValuesMsg()
      if self.general_system_state is None:
        self.general_system_state = sick_safetyscanners.msg.GeneralSystemStateMsg()
      if self.measurement_data is None:
        self.measurement_data = sick_safetyscanners.msg.MeasurementDataMsg()
      if self.intrusion_data is None:
        self.intrusion_data = sick_safetyscanners.msg.IntrusionDataMsg()
      if self.application_data is None:
        self.application_data = sick_safetyscanners.msg.ApplicationDataMsg()
      end = 0
      _x = self
      start = end
      end += 51
      (_x.header.version_version, _x.header.version_major_version, _x.header.version_minor_version, _x.header.version_release, _x.header.serial_number_of_device, _x.header.serial_number_of_channel_plug, _x.header.channel_number, _x.header.sequence_number, _x.header.scan_number, _x.header.timestamp_date, _x.header.timestamp_time, _x.derived_values.multiplication_factor, _x.derived_values.number_of_beams, _x.derived_values.scan_time, _x.derived_values.start_angle, _x.derived_values.angular_beam_resolution, _x.derived_values.interbeam_period, _x.general_system_state.run_mode_active, _x.general_system_state.standby_mode_active, _x.general_system_state.contamination_warning, _x.general_system_state.contamination_error, _x.general_system_state.reference_contour_status, _x.general_system_state.manipulation_status,) = _get_struct_4B2IB2IHI3H2fI6B().unpack(str[start:end])
      self.general_system_state.run_mode_active = bool(self.general_system_state.run_mode_active)
      self.general_system_state.standby_mode_active = bool(self.general_system_state.standby_mode_active)
      self.general_system_state.contamination_warning = bool(self.general_system_state.contamination_warning)
      self.general_system_state.contamination_error = bool(self.general_system_state.contamination_error)
      self.general_system_state.reference_contour_status = bool(self.general_system_state.reference_contour_status)
      self.general_system_state.manipulation_status = bool(self.general_system_state.manipulation_status)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.general_system_state.safe_cut_off_path = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=length)
      self.general_system_state.safe_cut_off_path = list(map(bool, self.general_system_state.safe_cut_off_path))
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.general_system_state.non_safe_cut_off_path = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=length)
      self.general_system_state.non_safe_cut_off_path = list(map(bool, self.general_system_state.non_safe_cut_off_path))
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.general_system_state.reset_required_cut_off_path = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=length)
      self.general_system_state.reset_required_cut_off_path = list(map(bool, self.general_system_state.reset_required_cut_off_path))
      _x = self
      start = end
      end += 10
      (_x.general_system_state.current_monitoring_case_no_table_1, _x.general_system_state.current_monitoring_case_no_table_2, _x.general_system_state.current_monitoring_case_no_table_3, _x.general_system_state.current_monitoring_case_no_table_4, _x.general_system_state.application_error, _x.general_system_state.device_error, _x.measurement_data.number_of_beams,) = _get_struct_6BI().unpack(str[start:end])
      self.general_system_state.application_error = bool(self.general_system_state.application_error)
      self.general_system_state.device_error = bool(self.general_system_state.device_error)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.measurement_data.scan_points = []
      for i in range(0, length):
        val1 = sick_safetyscanners.msg.ScanPointMsg()
        _x = val1
        start = end
        end += 13
        (_x.angle, _x.distance, _x.reflectivity, _x.valid, _x.infinite, _x.glare, _x.reflector, _x.contamination, _x.contamination_warning,) = _get_struct_fH7B().unpack(str[start:end])
        val1.valid = bool(val1.valid)
        val1.infinite = bool(val1.infinite)
        val1.glare = bool(val1.glare)
        val1.reflector = bool(val1.reflector)
        val1.contamination = bool(val1.contamination)
        val1.contamination_warning = bool(val1.contamination_warning)
        self.measurement_data.scan_points.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.intrusion_data.data = []
      for i in range(0, length):
        val1 = sick_safetyscanners.msg.IntrusionDatumMsg()
        start = end
        end += 4
        (val1.size,) = _get_struct_I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sB'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.flags = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=length)
        val1.flags = list(map(bool, val1.flags))
        self.intrusion_data.data.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.application_data.inputs.unsafe_inputs_input_sources = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=length)
      self.application_data.inputs.unsafe_inputs_input_sources = list(map(bool, self.application_data.inputs.unsafe_inputs_input_sources))
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.application_data.inputs.unsafe_inputs_flags = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=length)
      self.application_data.inputs.unsafe_inputs_flags = list(map(bool, self.application_data.inputs.unsafe_inputs_flags))
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sH'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.application_data.inputs.monitoring_case_number_inputs = numpy.frombuffer(str[start:end], dtype=numpy.uint16, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.application_data.inputs.monitoring_case_number_inputs_flags = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=length)
      self.application_data.inputs.monitoring_case_number_inputs_flags = list(map(bool, self.application_data.inputs.monitoring_case_number_inputs_flags))
      _x = self
      start = end
      end += 9
      (_x.application_data.inputs.linear_velocity_inputs_velocity_0, _x.application_data.inputs.linear_velocity_inputs_velocity_0_valid, _x.application_data.inputs.linear_velocity_inputs_velocity_0_transmitted_safely, _x.application_data.inputs.linear_velocity_inputs_velocity_1, _x.application_data.inputs.linear_velocity_inputs_velocity_1_valid, _x.application_data.inputs.linear_velocity_inputs_velocity_1_transmitted_safely, _x.application_data.inputs.sleep_mode_input,) = _get_struct_h2Bh3B().unpack(str[start:end])
      self.application_data.inputs.linear_velocity_inputs_velocity_0_valid = bool(self.application_data.inputs.linear_velocity_inputs_velocity_0_valid)
      self.application_data.inputs.linear_velocity_inputs_velocity_0_transmitted_safely = bool(self.application_data.inputs.linear_velocity_inputs_velocity_0_transmitted_safely)
      self.application_data.inputs.linear_velocity_inputs_velocity_1_valid = bool(self.application_data.inputs.linear_velocity_inputs_velocity_1_valid)
      self.application_data.inputs.linear_velocity_inputs_velocity_1_transmitted_safely = bool(self.application_data.inputs.linear_velocity_inputs_velocity_1_transmitted_safely)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.application_data.outputs.evaluation_path_outputs_eval_out = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=length)
      self.application_data.outputs.evaluation_path_outputs_eval_out = list(map(bool, self.application_data.outputs.evaluation_path_outputs_eval_out))
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.application_data.outputs.evaluation_path_outputs_is_safe = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=length)
      self.application_data.outputs.evaluation_path_outputs_is_safe = list(map(bool, self.application_data.outputs.evaluation_path_outputs_is_safe))
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.application_data.outputs.evaluation_path_outputs_is_valid = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=length)
      self.application_data.outputs.evaluation_path_outputs_is_valid = list(map(bool, self.application_data.outputs.evaluation_path_outputs_is_valid))
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sH'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.application_data.outputs.monitoring_case_number_outputs = numpy.frombuffer(str[start:end], dtype=numpy.uint16, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.application_data.outputs.monitoring_case_number_outputs_flags = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=length)
      self.application_data.outputs.monitoring_case_number_outputs_flags = list(map(bool, self.application_data.outputs.monitoring_case_number_outputs_flags))
      _x = self
      start = end
      end += 17
      (_x.application_data.outputs.sleep_mode_output, _x.application_data.outputs.sleep_mode_output_valid, _x.application_data.outputs.error_flag_contamination_warning, _x.application_data.outputs.error_flag_contamination_error, _x.application_data.outputs.error_flag_manipulation_error, _x.application_data.outputs.error_flag_glare, _x.application_data.outputs.error_flag_reference_contour_intruded, _x.application_data.outputs.error_flag_critical_error, _x.application_data.outputs.error_flags_are_valid, _x.application_data.outputs.linear_velocity_outputs_velocity_0, _x.application_data.outputs.linear_velocity_outputs_velocity_0_valid, _x.application_data.outputs.linear_velocity_outputs_velocity_0_transmitted_safely, _x.application_data.outputs.linear_velocity_outputs_velocity_1, _x.application_data.outputs.linear_velocity_outputs_velocity_1_valid, _x.application_data.outputs.linear_velocity_outputs_velocity_1_transmitted_safely,) = _get_struct_9Bh2Bh2B().unpack(str[start:end])
      self.application_data.outputs.sleep_mode_output_valid = bool(self.application_data.outputs.sleep_mode_output_valid)
      self.application_data.outputs.error_flag_contamination_warning = bool(self.application_data.outputs.error_flag_contamination_warning)
      self.application_data.outputs.error_flag_contamination_error = bool(self.application_data.outputs.error_flag_contamination_error)
      self.application_data.outputs.error_flag_manipulation_error = bool(self.application_data.outputs.error_flag_manipulation_error)
      self.application_data.outputs.error_flag_glare = bool(self.application_data.outputs.error_flag_glare)
      self.application_data.outputs.error_flag_reference_contour_intruded = bool(self.application_data.outputs.error_flag_reference_contour_intruded)
      self.application_data.outputs.error_flag_critical_error = bool(self.application_data.outputs.error_flag_critical_error)
      self.application_data.outputs.error_flags_are_valid = bool(self.application_data.outputs.error_flags_are_valid)
      self.application_data.outputs.linear_velocity_outputs_velocity_0_valid = bool(self.application_data.outputs.linear_velocity_outputs_velocity_0_valid)
      self.application_data.outputs.linear_velocity_outputs_velocity_0_transmitted_safely = bool(self.application_data.outputs.linear_velocity_outputs_velocity_0_transmitted_safely)
      self.application_data.outputs.linear_velocity_outputs_velocity_1_valid = bool(self.application_data.outputs.linear_velocity_outputs_velocity_1_valid)
      self.application_data.outputs.linear_velocity_outputs_velocity_1_transmitted_safely = bool(self.application_data.outputs.linear_velocity_outputs_velocity_1_transmitted_safely)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sh'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.application_data.outputs.resulting_velocity = numpy.frombuffer(str[start:end], dtype=numpy.int16, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.application_data.outputs.resulting_velocity_flags = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=length)
      self.application_data.outputs.resulting_velocity_flags = list(map(bool, self.application_data.outputs.resulting_velocity_flags))
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_4B2IB2IHI3H2fI6B = None
def _get_struct_4B2IB2IHI3H2fI6B():
    global _struct_4B2IB2IHI3H2fI6B
    if _struct_4B2IB2IHI3H2fI6B is None:
        _struct_4B2IB2IHI3H2fI6B = struct.Struct("<4B2IB2IHI3H2fI6B")
    return _struct_4B2IB2IHI3H2fI6B
_struct_6BI = None
def _get_struct_6BI():
    global _struct_6BI
    if _struct_6BI is None:
        _struct_6BI = struct.Struct("<6BI")
    return _struct_6BI
_struct_9Bh2Bh2B = None
def _get_struct_9Bh2Bh2B():
    global _struct_9Bh2Bh2B
    if _struct_9Bh2Bh2B is None:
        _struct_9Bh2Bh2B = struct.Struct("<9Bh2Bh2B")
    return _struct_9Bh2Bh2B
_struct_fH7B = None
def _get_struct_fH7B():
    global _struct_fH7B
    if _struct_fH7B is None:
        _struct_fH7B = struct.Struct("<fH7B")
    return _struct_fH7B
_struct_h2Bh3B = None
def _get_struct_h2Bh3B():
    global _struct_h2Bh3B
    if _struct_h2Bh3B is None:
        _struct_h2Bh3B = struct.Struct("<h2Bh3B")
    return _struct_h2Bh3B
