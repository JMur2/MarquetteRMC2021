# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from main/FieldDataRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class FieldDataRequest(genpy.Message):
  _md5sum = "d41d8cd98f00b204e9800998ecf8427e"
  _type = "main/FieldDataRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """
"""
  __slots__ = []
  _slot_types = []

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(FieldDataRequest, self).__init__(*args, **kwds)

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      pass
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      pass
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from main/FieldDataResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import main.msg

class FieldDataResponse(genpy.Message):
  _md5sum = "649f88740cfa9dc91cefbf73ed47045b"
  _type = "main/FieldDataResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """
main/FieldMsg[] fields
string device_name
main/MonitoringCaseMsg[] monitoring_cases


================================================================================
MSG: main/FieldMsg
float32[] ranges
float32 start_angle
float32 angular_resolution
bool protective_field

================================================================================
MSG: main/MonitoringCaseMsg
int32 monitoring_case_number
int32[] fields
bool[] fields_valid
"""
  __slots__ = ['fields','device_name','monitoring_cases']
  _slot_types = ['main/FieldMsg[]','string','main/MonitoringCaseMsg[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       fields,device_name,monitoring_cases

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(FieldDataResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.fields is None:
        self.fields = []
      if self.device_name is None:
        self.device_name = ''
      if self.monitoring_cases is None:
        self.monitoring_cases = []
    else:
      self.fields = []
      self.device_name = ''
      self.monitoring_cases = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.fields)
      buff.write(_struct_I.pack(length))
      for val1 in self.fields:
        length = len(val1.ranges)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*val1.ranges))
        _x = val1
        buff.write(_get_struct_2fB().pack(_x.start_angle, _x.angular_resolution, _x.protective_field))
      _x = self.device_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.monitoring_cases)
      buff.write(_struct_I.pack(length))
      for val1 in self.monitoring_cases:
        _x = val1.monitoring_case_number
        buff.write(_get_struct_i().pack(_x))
        length = len(val1.fields)
        buff.write(_struct_I.pack(length))
        pattern = '<%si'%length
        buff.write(struct.Struct(pattern).pack(*val1.fields))
        length = len(val1.fields_valid)
        buff.write(_struct_I.pack(length))
        pattern = '<%sB'%length
        buff.write(struct.Struct(pattern).pack(*val1.fields_valid))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.fields is None:
        self.fields = None
      if self.monitoring_cases is None:
        self.monitoring_cases = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.fields = []
      for i in range(0, length):
        val1 = main.msg.FieldMsg()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.ranges = s.unpack(str[start:end])
        _x = val1
        start = end
        end += 9
        (_x.start_angle, _x.angular_resolution, _x.protective_field,) = _get_struct_2fB().unpack(str[start:end])
        val1.protective_field = bool(val1.protective_field)
        self.fields.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.device_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.device_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.monitoring_cases = []
      for i in range(0, length):
        val1 = main.msg.MonitoringCaseMsg()
        start = end
        end += 4
        (val1.monitoring_case_number,) = _get_struct_i().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%si'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.fields = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sB'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.fields_valid = s.unpack(str[start:end])
        val1.fields_valid = list(map(bool, val1.fields_valid))
        self.monitoring_cases.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.fields)
      buff.write(_struct_I.pack(length))
      for val1 in self.fields:
        length = len(val1.ranges)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(val1.ranges.tostring())
        _x = val1
        buff.write(_get_struct_2fB().pack(_x.start_angle, _x.angular_resolution, _x.protective_field))
      _x = self.device_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.monitoring_cases)
      buff.write(_struct_I.pack(length))
      for val1 in self.monitoring_cases:
        _x = val1.monitoring_case_number
        buff.write(_get_struct_i().pack(_x))
        length = len(val1.fields)
        buff.write(_struct_I.pack(length))
        pattern = '<%si'%length
        buff.write(val1.fields.tostring())
        length = len(val1.fields_valid)
        buff.write(_struct_I.pack(length))
        pattern = '<%sB'%length
        buff.write(val1.fields_valid.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.fields is None:
        self.fields = None
      if self.monitoring_cases is None:
        self.monitoring_cases = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.fields = []
      for i in range(0, length):
        val1 = main.msg.FieldMsg()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.ranges = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        _x = val1
        start = end
        end += 9
        (_x.start_angle, _x.angular_resolution, _x.protective_field,) = _get_struct_2fB().unpack(str[start:end])
        val1.protective_field = bool(val1.protective_field)
        self.fields.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.device_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.device_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.monitoring_cases = []
      for i in range(0, length):
        val1 = main.msg.MonitoringCaseMsg()
        start = end
        end += 4
        (val1.monitoring_case_number,) = _get_struct_i().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%si'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.fields = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sB'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.fields_valid = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=length)
        val1.fields_valid = list(map(bool, val1.fields_valid))
        self.monitoring_cases.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2fB = None
def _get_struct_2fB():
    global _struct_2fB
    if _struct_2fB is None:
        _struct_2fB = struct.Struct("<2fB")
    return _struct_2fB
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
class FieldData(object):
  _type          = 'main/FieldData'
  _md5sum = '649f88740cfa9dc91cefbf73ed47045b'
  _request_class  = FieldDataRequest
  _response_class = FieldDataResponse
