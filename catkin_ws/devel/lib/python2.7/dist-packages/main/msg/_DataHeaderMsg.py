# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from main/DataHeaderMsg.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class DataHeaderMsg(genpy.Message):
  _md5sum = "639f9d3c49bcb2f17e3c86d83f9746c8"
  _type = "main/DataHeaderMsg"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint8 version_version
uint8 version_major_version
uint8 version_minor_version
uint8 version_release

uint32 serial_number_of_device
uint32 serial_number_of_channel_plug
uint8 channel_number

uint32 sequence_number
uint32 scan_number

uint16 timestamp_date
uint32 timestamp_time
"""
  __slots__ = ['version_version','version_major_version','version_minor_version','version_release','serial_number_of_device','serial_number_of_channel_plug','channel_number','sequence_number','scan_number','timestamp_date','timestamp_time']
  _slot_types = ['uint8','uint8','uint8','uint8','uint32','uint32','uint8','uint32','uint32','uint16','uint32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       version_version,version_major_version,version_minor_version,version_release,serial_number_of_device,serial_number_of_channel_plug,channel_number,sequence_number,scan_number,timestamp_date,timestamp_time

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(DataHeaderMsg, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.version_version is None:
        self.version_version = 0
      if self.version_major_version is None:
        self.version_major_version = 0
      if self.version_minor_version is None:
        self.version_minor_version = 0
      if self.version_release is None:
        self.version_release = 0
      if self.serial_number_of_device is None:
        self.serial_number_of_device = 0
      if self.serial_number_of_channel_plug is None:
        self.serial_number_of_channel_plug = 0
      if self.channel_number is None:
        self.channel_number = 0
      if self.sequence_number is None:
        self.sequence_number = 0
      if self.scan_number is None:
        self.scan_number = 0
      if self.timestamp_date is None:
        self.timestamp_date = 0
      if self.timestamp_time is None:
        self.timestamp_time = 0
    else:
      self.version_version = 0
      self.version_major_version = 0
      self.version_minor_version = 0
      self.version_release = 0
      self.serial_number_of_device = 0
      self.serial_number_of_channel_plug = 0
      self.channel_number = 0
      self.sequence_number = 0
      self.scan_number = 0
      self.timestamp_date = 0
      self.timestamp_time = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_4B2IB2IHI().pack(_x.version_version, _x.version_major_version, _x.version_minor_version, _x.version_release, _x.serial_number_of_device, _x.serial_number_of_channel_plug, _x.channel_number, _x.sequence_number, _x.scan_number, _x.timestamp_date, _x.timestamp_time))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 27
      (_x.version_version, _x.version_major_version, _x.version_minor_version, _x.version_release, _x.serial_number_of_device, _x.serial_number_of_channel_plug, _x.channel_number, _x.sequence_number, _x.scan_number, _x.timestamp_date, _x.timestamp_time,) = _get_struct_4B2IB2IHI().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_4B2IB2IHI().pack(_x.version_version, _x.version_major_version, _x.version_minor_version, _x.version_release, _x.serial_number_of_device, _x.serial_number_of_channel_plug, _x.channel_number, _x.sequence_number, _x.scan_number, _x.timestamp_date, _x.timestamp_time))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 27
      (_x.version_version, _x.version_major_version, _x.version_minor_version, _x.version_release, _x.serial_number_of_device, _x.serial_number_of_channel_plug, _x.channel_number, _x.sequence_number, _x.scan_number, _x.timestamp_date, _x.timestamp_time,) = _get_struct_4B2IB2IHI().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_4B2IB2IHI = None
def _get_struct_4B2IB2IHI():
    global _struct_4B2IB2IHI
    if _struct_4B2IB2IHI is None:
        _struct_4B2IB2IHI = struct.Struct("<4B2IB2IHI")
    return _struct_4B2IB2IHI
