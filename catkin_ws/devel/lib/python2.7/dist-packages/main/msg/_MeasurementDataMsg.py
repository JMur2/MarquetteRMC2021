# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from main/MeasurementDataMsg.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import main.msg

class MeasurementDataMsg(genpy.Message):
  _md5sum = "b7e755cfc4fb85e1a4ded54fd0d31589"
  _type = "main/MeasurementDataMsg"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint32 number_of_beams
ScanPointMsg[] scan_points


================================================================================
MSG: main/ScanPointMsg
float32 angle
uint16 distance
uint8 reflectivity
bool valid
bool infinite
bool glare
bool reflector
bool contamination
bool contamination_warning
"""
  __slots__ = ['number_of_beams','scan_points']
  _slot_types = ['uint32','main/ScanPointMsg[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       number_of_beams,scan_points

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MeasurementDataMsg, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.number_of_beams is None:
        self.number_of_beams = 0
      if self.scan_points is None:
        self.scan_points = []
    else:
      self.number_of_beams = 0
      self.scan_points = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.number_of_beams
      buff.write(_get_struct_I().pack(_x))
      length = len(self.scan_points)
      buff.write(_struct_I.pack(length))
      for val1 in self.scan_points:
        _x = val1
        buff.write(_get_struct_fH7B().pack(_x.angle, _x.distance, _x.reflectivity, _x.valid, _x.infinite, _x.glare, _x.reflector, _x.contamination, _x.contamination_warning))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.scan_points is None:
        self.scan_points = None
      end = 0
      start = end
      end += 4
      (self.number_of_beams,) = _get_struct_I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.scan_points = []
      for i in range(0, length):
        val1 = main.msg.ScanPointMsg()
        _x = val1
        start = end
        end += 13
        (_x.angle, _x.distance, _x.reflectivity, _x.valid, _x.infinite, _x.glare, _x.reflector, _x.contamination, _x.contamination_warning,) = _get_struct_fH7B().unpack(str[start:end])
        val1.valid = bool(val1.valid)
        val1.infinite = bool(val1.infinite)
        val1.glare = bool(val1.glare)
        val1.reflector = bool(val1.reflector)
        val1.contamination = bool(val1.contamination)
        val1.contamination_warning = bool(val1.contamination_warning)
        self.scan_points.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.number_of_beams
      buff.write(_get_struct_I().pack(_x))
      length = len(self.scan_points)
      buff.write(_struct_I.pack(length))
      for val1 in self.scan_points:
        _x = val1
        buff.write(_get_struct_fH7B().pack(_x.angle, _x.distance, _x.reflectivity, _x.valid, _x.infinite, _x.glare, _x.reflector, _x.contamination, _x.contamination_warning))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.scan_points is None:
        self.scan_points = None
      end = 0
      start = end
      end += 4
      (self.number_of_beams,) = _get_struct_I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.scan_points = []
      for i in range(0, length):
        val1 = main.msg.ScanPointMsg()
        _x = val1
        start = end
        end += 13
        (_x.angle, _x.distance, _x.reflectivity, _x.valid, _x.infinite, _x.glare, _x.reflector, _x.contamination, _x.contamination_warning,) = _get_struct_fH7B().unpack(str[start:end])
        val1.valid = bool(val1.valid)
        val1.infinite = bool(val1.infinite)
        val1.glare = bool(val1.glare)
        val1.reflector = bool(val1.reflector)
        val1.contamination = bool(val1.contamination)
        val1.contamination_warning = bool(val1.contamination_warning)
        self.scan_points.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_fH7B = None
def _get_struct_fH7B():
    global _struct_fH7B
    if _struct_fH7B is None:
        _struct_fH7B = struct.Struct("<fH7B")
    return _struct_fH7B
