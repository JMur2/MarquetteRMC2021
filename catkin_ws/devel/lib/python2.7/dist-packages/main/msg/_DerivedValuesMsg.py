# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from main/DerivedValuesMsg.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class DerivedValuesMsg(genpy.Message):
  _md5sum = "04584ac5d46a750ab91f3b01bac703dd"
  _type = "main/DerivedValuesMsg"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint16 multiplication_factor
uint16 number_of_beams
uint16 scan_time
float32 start_angle
float32 angular_beam_resolution
uint32 interbeam_period
"""
  __slots__ = ['multiplication_factor','number_of_beams','scan_time','start_angle','angular_beam_resolution','interbeam_period']
  _slot_types = ['uint16','uint16','uint16','float32','float32','uint32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       multiplication_factor,number_of_beams,scan_time,start_angle,angular_beam_resolution,interbeam_period

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(DerivedValuesMsg, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.multiplication_factor is None:
        self.multiplication_factor = 0
      if self.number_of_beams is None:
        self.number_of_beams = 0
      if self.scan_time is None:
        self.scan_time = 0
      if self.start_angle is None:
        self.start_angle = 0.
      if self.angular_beam_resolution is None:
        self.angular_beam_resolution = 0.
      if self.interbeam_period is None:
        self.interbeam_period = 0
    else:
      self.multiplication_factor = 0
      self.number_of_beams = 0
      self.scan_time = 0
      self.start_angle = 0.
      self.angular_beam_resolution = 0.
      self.interbeam_period = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3H2fI().pack(_x.multiplication_factor, _x.number_of_beams, _x.scan_time, _x.start_angle, _x.angular_beam_resolution, _x.interbeam_period))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 18
      (_x.multiplication_factor, _x.number_of_beams, _x.scan_time, _x.start_angle, _x.angular_beam_resolution, _x.interbeam_period,) = _get_struct_3H2fI().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3H2fI().pack(_x.multiplication_factor, _x.number_of_beams, _x.scan_time, _x.start_angle, _x.angular_beam_resolution, _x.interbeam_period))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 18
      (_x.multiplication_factor, _x.number_of_beams, _x.scan_time, _x.start_angle, _x.angular_beam_resolution, _x.interbeam_period,) = _get_struct_3H2fI().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3H2fI = None
def _get_struct_3H2fI():
    global _struct_3H2fI
    if _struct_3H2fI is None:
        _struct_3H2fI = struct.Struct("<3H2fI")
    return _struct_3H2fI
