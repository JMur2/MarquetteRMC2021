# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from main/ApplicationDataMsg.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import main.msg

class ApplicationDataMsg(genpy.Message):
  _md5sum = "e2c1cd2050a13f8b7c83b35c17583a56"
  _type = "main/ApplicationDataMsg"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """ApplicationInputsMsg inputs
ApplicationOutputsMsg outputs

================================================================================
MSG: main/ApplicationInputsMsg
bool[] unsafe_inputs_input_sources
bool[] unsafe_inputs_flags

uint16[] monitoring_case_number_inputs
bool[] monitoring_case_number_inputs_flags

int16 linear_velocity_inputs_velocity_0
bool linear_velocity_inputs_velocity_0_valid
bool linear_velocity_inputs_velocity_0_transmitted_safely

int16 linear_velocity_inputs_velocity_1
bool linear_velocity_inputs_velocity_1_valid
bool linear_velocity_inputs_velocity_1_transmitted_safely

uint8 sleep_mode_input


================================================================================
MSG: main/ApplicationOutputsMsg
bool[] evaluation_path_outputs_eval_out
bool[] evaluation_path_outputs_is_safe
bool[] evaluation_path_outputs_is_valid

uint16[] monitoring_case_number_outputs 
bool[] monitoring_case_number_outputs_flags

uint8 sleep_mode_output
bool sleep_mode_output_valid

bool error_flag_contamination_warning
bool error_flag_contamination_error
bool error_flag_manipulation_error
bool error_flag_glare
bool error_flag_reference_contour_intruded
bool error_flag_critical_error
bool error_flags_are_valid


int16 linear_velocity_outputs_velocity_0
bool linear_velocity_outputs_velocity_0_valid
bool linear_velocity_outputs_velocity_0_transmitted_safely

int16 linear_velocity_outputs_velocity_1
bool linear_velocity_outputs_velocity_1_valid
bool linear_velocity_outputs_velocity_1_transmitted_safely

int16[] resulting_velocity
bool[] resulting_velocity_flags

 
"""
  __slots__ = ['inputs','outputs']
  _slot_types = ['main/ApplicationInputsMsg','main/ApplicationOutputsMsg']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       inputs,outputs

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ApplicationDataMsg, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.inputs is None:
        self.inputs = main.msg.ApplicationInputsMsg()
      if self.outputs is None:
        self.outputs = main.msg.ApplicationOutputsMsg()
    else:
      self.inputs = main.msg.ApplicationInputsMsg()
      self.outputs = main.msg.ApplicationOutputsMsg()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.inputs.unsafe_inputs_input_sources)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(struct.Struct(pattern).pack(*self.inputs.unsafe_inputs_input_sources))
      length = len(self.inputs.unsafe_inputs_flags)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(struct.Struct(pattern).pack(*self.inputs.unsafe_inputs_flags))
      length = len(self.inputs.monitoring_case_number_inputs)
      buff.write(_struct_I.pack(length))
      pattern = '<%sH'%length
      buff.write(struct.Struct(pattern).pack(*self.inputs.monitoring_case_number_inputs))
      length = len(self.inputs.monitoring_case_number_inputs_flags)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(struct.Struct(pattern).pack(*self.inputs.monitoring_case_number_inputs_flags))
      _x = self
      buff.write(_get_struct_h2Bh3B().pack(_x.inputs.linear_velocity_inputs_velocity_0, _x.inputs.linear_velocity_inputs_velocity_0_valid, _x.inputs.linear_velocity_inputs_velocity_0_transmitted_safely, _x.inputs.linear_velocity_inputs_velocity_1, _x.inputs.linear_velocity_inputs_velocity_1_valid, _x.inputs.linear_velocity_inputs_velocity_1_transmitted_safely, _x.inputs.sleep_mode_input))
      length = len(self.outputs.evaluation_path_outputs_eval_out)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(struct.Struct(pattern).pack(*self.outputs.evaluation_path_outputs_eval_out))
      length = len(self.outputs.evaluation_path_outputs_is_safe)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(struct.Struct(pattern).pack(*self.outputs.evaluation_path_outputs_is_safe))
      length = len(self.outputs.evaluation_path_outputs_is_valid)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(struct.Struct(pattern).pack(*self.outputs.evaluation_path_outputs_is_valid))
      length = len(self.outputs.monitoring_case_number_outputs)
      buff.write(_struct_I.pack(length))
      pattern = '<%sH'%length
      buff.write(struct.Struct(pattern).pack(*self.outputs.monitoring_case_number_outputs))
      length = len(self.outputs.monitoring_case_number_outputs_flags)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(struct.Struct(pattern).pack(*self.outputs.monitoring_case_number_outputs_flags))
      _x = self
      buff.write(_get_struct_9Bh2Bh2B().pack(_x.outputs.sleep_mode_output, _x.outputs.sleep_mode_output_valid, _x.outputs.error_flag_contamination_warning, _x.outputs.error_flag_contamination_error, _x.outputs.error_flag_manipulation_error, _x.outputs.error_flag_glare, _x.outputs.error_flag_reference_contour_intruded, _x.outputs.error_flag_critical_error, _x.outputs.error_flags_are_valid, _x.outputs.linear_velocity_outputs_velocity_0, _x.outputs.linear_velocity_outputs_velocity_0_valid, _x.outputs.linear_velocity_outputs_velocity_0_transmitted_safely, _x.outputs.linear_velocity_outputs_velocity_1, _x.outputs.linear_velocity_outputs_velocity_1_valid, _x.outputs.linear_velocity_outputs_velocity_1_transmitted_safely))
      length = len(self.outputs.resulting_velocity)
      buff.write(_struct_I.pack(length))
      pattern = '<%sh'%length
      buff.write(struct.Struct(pattern).pack(*self.outputs.resulting_velocity))
      length = len(self.outputs.resulting_velocity_flags)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(struct.Struct(pattern).pack(*self.outputs.resulting_velocity_flags))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.inputs is None:
        self.inputs = main.msg.ApplicationInputsMsg()
      if self.outputs is None:
        self.outputs = main.msg.ApplicationOutputsMsg()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.inputs.unsafe_inputs_input_sources = s.unpack(str[start:end])
      self.inputs.unsafe_inputs_input_sources = list(map(bool, self.inputs.unsafe_inputs_input_sources))
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.inputs.unsafe_inputs_flags = s.unpack(str[start:end])
      self.inputs.unsafe_inputs_flags = list(map(bool, self.inputs.unsafe_inputs_flags))
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sH'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.inputs.monitoring_case_number_inputs = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.inputs.monitoring_case_number_inputs_flags = s.unpack(str[start:end])
      self.inputs.monitoring_case_number_inputs_flags = list(map(bool, self.inputs.monitoring_case_number_inputs_flags))
      _x = self
      start = end
      end += 9
      (_x.inputs.linear_velocity_inputs_velocity_0, _x.inputs.linear_velocity_inputs_velocity_0_valid, _x.inputs.linear_velocity_inputs_velocity_0_transmitted_safely, _x.inputs.linear_velocity_inputs_velocity_1, _x.inputs.linear_velocity_inputs_velocity_1_valid, _x.inputs.linear_velocity_inputs_velocity_1_transmitted_safely, _x.inputs.sleep_mode_input,) = _get_struct_h2Bh3B().unpack(str[start:end])
      self.inputs.linear_velocity_inputs_velocity_0_valid = bool(self.inputs.linear_velocity_inputs_velocity_0_valid)
      self.inputs.linear_velocity_inputs_velocity_0_transmitted_safely = bool(self.inputs.linear_velocity_inputs_velocity_0_transmitted_safely)
      self.inputs.linear_velocity_inputs_velocity_1_valid = bool(self.inputs.linear_velocity_inputs_velocity_1_valid)
      self.inputs.linear_velocity_inputs_velocity_1_transmitted_safely = bool(self.inputs.linear_velocity_inputs_velocity_1_transmitted_safely)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.outputs.evaluation_path_outputs_eval_out = s.unpack(str[start:end])
      self.outputs.evaluation_path_outputs_eval_out = list(map(bool, self.outputs.evaluation_path_outputs_eval_out))
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.outputs.evaluation_path_outputs_is_safe = s.unpack(str[start:end])
      self.outputs.evaluation_path_outputs_is_safe = list(map(bool, self.outputs.evaluation_path_outputs_is_safe))
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.outputs.evaluation_path_outputs_is_valid = s.unpack(str[start:end])
      self.outputs.evaluation_path_outputs_is_valid = list(map(bool, self.outputs.evaluation_path_outputs_is_valid))
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sH'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.outputs.monitoring_case_number_outputs = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.outputs.monitoring_case_number_outputs_flags = s.unpack(str[start:end])
      self.outputs.monitoring_case_number_outputs_flags = list(map(bool, self.outputs.monitoring_case_number_outputs_flags))
      _x = self
      start = end
      end += 17
      (_x.outputs.sleep_mode_output, _x.outputs.sleep_mode_output_valid, _x.outputs.error_flag_contamination_warning, _x.outputs.error_flag_contamination_error, _x.outputs.error_flag_manipulation_error, _x.outputs.error_flag_glare, _x.outputs.error_flag_reference_contour_intruded, _x.outputs.error_flag_critical_error, _x.outputs.error_flags_are_valid, _x.outputs.linear_velocity_outputs_velocity_0, _x.outputs.linear_velocity_outputs_velocity_0_valid, _x.outputs.linear_velocity_outputs_velocity_0_transmitted_safely, _x.outputs.linear_velocity_outputs_velocity_1, _x.outputs.linear_velocity_outputs_velocity_1_valid, _x.outputs.linear_velocity_outputs_velocity_1_transmitted_safely,) = _get_struct_9Bh2Bh2B().unpack(str[start:end])
      self.outputs.sleep_mode_output_valid = bool(self.outputs.sleep_mode_output_valid)
      self.outputs.error_flag_contamination_warning = bool(self.outputs.error_flag_contamination_warning)
      self.outputs.error_flag_contamination_error = bool(self.outputs.error_flag_contamination_error)
      self.outputs.error_flag_manipulation_error = bool(self.outputs.error_flag_manipulation_error)
      self.outputs.error_flag_glare = bool(self.outputs.error_flag_glare)
      self.outputs.error_flag_reference_contour_intruded = bool(self.outputs.error_flag_reference_contour_intruded)
      self.outputs.error_flag_critical_error = bool(self.outputs.error_flag_critical_error)
      self.outputs.error_flags_are_valid = bool(self.outputs.error_flags_are_valid)
      self.outputs.linear_velocity_outputs_velocity_0_valid = bool(self.outputs.linear_velocity_outputs_velocity_0_valid)
      self.outputs.linear_velocity_outputs_velocity_0_transmitted_safely = bool(self.outputs.linear_velocity_outputs_velocity_0_transmitted_safely)
      self.outputs.linear_velocity_outputs_velocity_1_valid = bool(self.outputs.linear_velocity_outputs_velocity_1_valid)
      self.outputs.linear_velocity_outputs_velocity_1_transmitted_safely = bool(self.outputs.linear_velocity_outputs_velocity_1_transmitted_safely)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sh'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.outputs.resulting_velocity = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.outputs.resulting_velocity_flags = s.unpack(str[start:end])
      self.outputs.resulting_velocity_flags = list(map(bool, self.outputs.resulting_velocity_flags))
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.inputs.unsafe_inputs_input_sources)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(self.inputs.unsafe_inputs_input_sources.tostring())
      length = len(self.inputs.unsafe_inputs_flags)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(self.inputs.unsafe_inputs_flags.tostring())
      length = len(self.inputs.monitoring_case_number_inputs)
      buff.write(_struct_I.pack(length))
      pattern = '<%sH'%length
      buff.write(self.inputs.monitoring_case_number_inputs.tostring())
      length = len(self.inputs.monitoring_case_number_inputs_flags)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(self.inputs.monitoring_case_number_inputs_flags.tostring())
      _x = self
      buff.write(_get_struct_h2Bh3B().pack(_x.inputs.linear_velocity_inputs_velocity_0, _x.inputs.linear_velocity_inputs_velocity_0_valid, _x.inputs.linear_velocity_inputs_velocity_0_transmitted_safely, _x.inputs.linear_velocity_inputs_velocity_1, _x.inputs.linear_velocity_inputs_velocity_1_valid, _x.inputs.linear_velocity_inputs_velocity_1_transmitted_safely, _x.inputs.sleep_mode_input))
      length = len(self.outputs.evaluation_path_outputs_eval_out)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(self.outputs.evaluation_path_outputs_eval_out.tostring())
      length = len(self.outputs.evaluation_path_outputs_is_safe)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(self.outputs.evaluation_path_outputs_is_safe.tostring())
      length = len(self.outputs.evaluation_path_outputs_is_valid)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(self.outputs.evaluation_path_outputs_is_valid.tostring())
      length = len(self.outputs.monitoring_case_number_outputs)
      buff.write(_struct_I.pack(length))
      pattern = '<%sH'%length
      buff.write(self.outputs.monitoring_case_number_outputs.tostring())
      length = len(self.outputs.monitoring_case_number_outputs_flags)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(self.outputs.monitoring_case_number_outputs_flags.tostring())
      _x = self
      buff.write(_get_struct_9Bh2Bh2B().pack(_x.outputs.sleep_mode_output, _x.outputs.sleep_mode_output_valid, _x.outputs.error_flag_contamination_warning, _x.outputs.error_flag_contamination_error, _x.outputs.error_flag_manipulation_error, _x.outputs.error_flag_glare, _x.outputs.error_flag_reference_contour_intruded, _x.outputs.error_flag_critical_error, _x.outputs.error_flags_are_valid, _x.outputs.linear_velocity_outputs_velocity_0, _x.outputs.linear_velocity_outputs_velocity_0_valid, _x.outputs.linear_velocity_outputs_velocity_0_transmitted_safely, _x.outputs.linear_velocity_outputs_velocity_1, _x.outputs.linear_velocity_outputs_velocity_1_valid, _x.outputs.linear_velocity_outputs_velocity_1_transmitted_safely))
      length = len(self.outputs.resulting_velocity)
      buff.write(_struct_I.pack(length))
      pattern = '<%sh'%length
      buff.write(self.outputs.resulting_velocity.tostring())
      length = len(self.outputs.resulting_velocity_flags)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(self.outputs.resulting_velocity_flags.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.inputs is None:
        self.inputs = main.msg.ApplicationInputsMsg()
      if self.outputs is None:
        self.outputs = main.msg.ApplicationOutputsMsg()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.inputs.unsafe_inputs_input_sources = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=length)
      self.inputs.unsafe_inputs_input_sources = list(map(bool, self.inputs.unsafe_inputs_input_sources))
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.inputs.unsafe_inputs_flags = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=length)
      self.inputs.unsafe_inputs_flags = list(map(bool, self.inputs.unsafe_inputs_flags))
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sH'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.inputs.monitoring_case_number_inputs = numpy.frombuffer(str[start:end], dtype=numpy.uint16, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.inputs.monitoring_case_number_inputs_flags = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=length)
      self.inputs.monitoring_case_number_inputs_flags = list(map(bool, self.inputs.monitoring_case_number_inputs_flags))
      _x = self
      start = end
      end += 9
      (_x.inputs.linear_velocity_inputs_velocity_0, _x.inputs.linear_velocity_inputs_velocity_0_valid, _x.inputs.linear_velocity_inputs_velocity_0_transmitted_safely, _x.inputs.linear_velocity_inputs_velocity_1, _x.inputs.linear_velocity_inputs_velocity_1_valid, _x.inputs.linear_velocity_inputs_velocity_1_transmitted_safely, _x.inputs.sleep_mode_input,) = _get_struct_h2Bh3B().unpack(str[start:end])
      self.inputs.linear_velocity_inputs_velocity_0_valid = bool(self.inputs.linear_velocity_inputs_velocity_0_valid)
      self.inputs.linear_velocity_inputs_velocity_0_transmitted_safely = bool(self.inputs.linear_velocity_inputs_velocity_0_transmitted_safely)
      self.inputs.linear_velocity_inputs_velocity_1_valid = bool(self.inputs.linear_velocity_inputs_velocity_1_valid)
      self.inputs.linear_velocity_inputs_velocity_1_transmitted_safely = bool(self.inputs.linear_velocity_inputs_velocity_1_transmitted_safely)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.outputs.evaluation_path_outputs_eval_out = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=length)
      self.outputs.evaluation_path_outputs_eval_out = list(map(bool, self.outputs.evaluation_path_outputs_eval_out))
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.outputs.evaluation_path_outputs_is_safe = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=length)
      self.outputs.evaluation_path_outputs_is_safe = list(map(bool, self.outputs.evaluation_path_outputs_is_safe))
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.outputs.evaluation_path_outputs_is_valid = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=length)
      self.outputs.evaluation_path_outputs_is_valid = list(map(bool, self.outputs.evaluation_path_outputs_is_valid))
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sH'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.outputs.monitoring_case_number_outputs = numpy.frombuffer(str[start:end], dtype=numpy.uint16, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.outputs.monitoring_case_number_outputs_flags = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=length)
      self.outputs.monitoring_case_number_outputs_flags = list(map(bool, self.outputs.monitoring_case_number_outputs_flags))
      _x = self
      start = end
      end += 17
      (_x.outputs.sleep_mode_output, _x.outputs.sleep_mode_output_valid, _x.outputs.error_flag_contamination_warning, _x.outputs.error_flag_contamination_error, _x.outputs.error_flag_manipulation_error, _x.outputs.error_flag_glare, _x.outputs.error_flag_reference_contour_intruded, _x.outputs.error_flag_critical_error, _x.outputs.error_flags_are_valid, _x.outputs.linear_velocity_outputs_velocity_0, _x.outputs.linear_velocity_outputs_velocity_0_valid, _x.outputs.linear_velocity_outputs_velocity_0_transmitted_safely, _x.outputs.linear_velocity_outputs_velocity_1, _x.outputs.linear_velocity_outputs_velocity_1_valid, _x.outputs.linear_velocity_outputs_velocity_1_transmitted_safely,) = _get_struct_9Bh2Bh2B().unpack(str[start:end])
      self.outputs.sleep_mode_output_valid = bool(self.outputs.sleep_mode_output_valid)
      self.outputs.error_flag_contamination_warning = bool(self.outputs.error_flag_contamination_warning)
      self.outputs.error_flag_contamination_error = bool(self.outputs.error_flag_contamination_error)
      self.outputs.error_flag_manipulation_error = bool(self.outputs.error_flag_manipulation_error)
      self.outputs.error_flag_glare = bool(self.outputs.error_flag_glare)
      self.outputs.error_flag_reference_contour_intruded = bool(self.outputs.error_flag_reference_contour_intruded)
      self.outputs.error_flag_critical_error = bool(self.outputs.error_flag_critical_error)
      self.outputs.error_flags_are_valid = bool(self.outputs.error_flags_are_valid)
      self.outputs.linear_velocity_outputs_velocity_0_valid = bool(self.outputs.linear_velocity_outputs_velocity_0_valid)
      self.outputs.linear_velocity_outputs_velocity_0_transmitted_safely = bool(self.outputs.linear_velocity_outputs_velocity_0_transmitted_safely)
      self.outputs.linear_velocity_outputs_velocity_1_valid = bool(self.outputs.linear_velocity_outputs_velocity_1_valid)
      self.outputs.linear_velocity_outputs_velocity_1_transmitted_safely = bool(self.outputs.linear_velocity_outputs_velocity_1_transmitted_safely)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sh'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.outputs.resulting_velocity = numpy.frombuffer(str[start:end], dtype=numpy.int16, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.outputs.resulting_velocity_flags = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=length)
      self.outputs.resulting_velocity_flags = list(map(bool, self.outputs.resulting_velocity_flags))
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_9Bh2Bh2B = None
def _get_struct_9Bh2Bh2B():
    global _struct_9Bh2Bh2B
    if _struct_9Bh2Bh2B is None:
        _struct_9Bh2Bh2B = struct.Struct("<9Bh2Bh2B")
    return _struct_9Bh2Bh2B
_struct_h2Bh3B = None
def _get_struct_h2Bh3B():
    global _struct_h2Bh3B
    if _struct_h2Bh3B is None:
        _struct_h2Bh3B = struct.Struct("<h2Bh3B")
    return _struct_h2Bh3B
