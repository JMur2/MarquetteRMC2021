# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from main/GeneralSystemStateMsg.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class GeneralSystemStateMsg(genpy.Message):
  _md5sum = "fda37ee099981af2c442eec5d758ecbd"
  _type = "main/GeneralSystemStateMsg"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool run_mode_active
bool standby_mode_active
bool contamination_warning
bool contamination_error
bool reference_contour_status
bool manipulation_status

bool[] safe_cut_off_path
bool[] non_safe_cut_off_path
bool[] reset_required_cut_off_path

uint8 current_monitoring_case_no_table_1
uint8 current_monitoring_case_no_table_2
uint8 current_monitoring_case_no_table_3
uint8 current_monitoring_case_no_table_4

bool application_error
bool device_error
"""
  __slots__ = ['run_mode_active','standby_mode_active','contamination_warning','contamination_error','reference_contour_status','manipulation_status','safe_cut_off_path','non_safe_cut_off_path','reset_required_cut_off_path','current_monitoring_case_no_table_1','current_monitoring_case_no_table_2','current_monitoring_case_no_table_3','current_monitoring_case_no_table_4','application_error','device_error']
  _slot_types = ['bool','bool','bool','bool','bool','bool','bool[]','bool[]','bool[]','uint8','uint8','uint8','uint8','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       run_mode_active,standby_mode_active,contamination_warning,contamination_error,reference_contour_status,manipulation_status,safe_cut_off_path,non_safe_cut_off_path,reset_required_cut_off_path,current_monitoring_case_no_table_1,current_monitoring_case_no_table_2,current_monitoring_case_no_table_3,current_monitoring_case_no_table_4,application_error,device_error

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GeneralSystemStateMsg, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.run_mode_active is None:
        self.run_mode_active = False
      if self.standby_mode_active is None:
        self.standby_mode_active = False
      if self.contamination_warning is None:
        self.contamination_warning = False
      if self.contamination_error is None:
        self.contamination_error = False
      if self.reference_contour_status is None:
        self.reference_contour_status = False
      if self.manipulation_status is None:
        self.manipulation_status = False
      if self.safe_cut_off_path is None:
        self.safe_cut_off_path = []
      if self.non_safe_cut_off_path is None:
        self.non_safe_cut_off_path = []
      if self.reset_required_cut_off_path is None:
        self.reset_required_cut_off_path = []
      if self.current_monitoring_case_no_table_1 is None:
        self.current_monitoring_case_no_table_1 = 0
      if self.current_monitoring_case_no_table_2 is None:
        self.current_monitoring_case_no_table_2 = 0
      if self.current_monitoring_case_no_table_3 is None:
        self.current_monitoring_case_no_table_3 = 0
      if self.current_monitoring_case_no_table_4 is None:
        self.current_monitoring_case_no_table_4 = 0
      if self.application_error is None:
        self.application_error = False
      if self.device_error is None:
        self.device_error = False
    else:
      self.run_mode_active = False
      self.standby_mode_active = False
      self.contamination_warning = False
      self.contamination_error = False
      self.reference_contour_status = False
      self.manipulation_status = False
      self.safe_cut_off_path = []
      self.non_safe_cut_off_path = []
      self.reset_required_cut_off_path = []
      self.current_monitoring_case_no_table_1 = 0
      self.current_monitoring_case_no_table_2 = 0
      self.current_monitoring_case_no_table_3 = 0
      self.current_monitoring_case_no_table_4 = 0
      self.application_error = False
      self.device_error = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_6B().pack(_x.run_mode_active, _x.standby_mode_active, _x.contamination_warning, _x.contamination_error, _x.reference_contour_status, _x.manipulation_status))
      length = len(self.safe_cut_off_path)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(struct.Struct(pattern).pack(*self.safe_cut_off_path))
      length = len(self.non_safe_cut_off_path)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(struct.Struct(pattern).pack(*self.non_safe_cut_off_path))
      length = len(self.reset_required_cut_off_path)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(struct.Struct(pattern).pack(*self.reset_required_cut_off_path))
      _x = self
      buff.write(_get_struct_6B().pack(_x.current_monitoring_case_no_table_1, _x.current_monitoring_case_no_table_2, _x.current_monitoring_case_no_table_3, _x.current_monitoring_case_no_table_4, _x.application_error, _x.device_error))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 6
      (_x.run_mode_active, _x.standby_mode_active, _x.contamination_warning, _x.contamination_error, _x.reference_contour_status, _x.manipulation_status,) = _get_struct_6B().unpack(str[start:end])
      self.run_mode_active = bool(self.run_mode_active)
      self.standby_mode_active = bool(self.standby_mode_active)
      self.contamination_warning = bool(self.contamination_warning)
      self.contamination_error = bool(self.contamination_error)
      self.reference_contour_status = bool(self.reference_contour_status)
      self.manipulation_status = bool(self.manipulation_status)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.safe_cut_off_path = s.unpack(str[start:end])
      self.safe_cut_off_path = list(map(bool, self.safe_cut_off_path))
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.non_safe_cut_off_path = s.unpack(str[start:end])
      self.non_safe_cut_off_path = list(map(bool, self.non_safe_cut_off_path))
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.reset_required_cut_off_path = s.unpack(str[start:end])
      self.reset_required_cut_off_path = list(map(bool, self.reset_required_cut_off_path))
      _x = self
      start = end
      end += 6
      (_x.current_monitoring_case_no_table_1, _x.current_monitoring_case_no_table_2, _x.current_monitoring_case_no_table_3, _x.current_monitoring_case_no_table_4, _x.application_error, _x.device_error,) = _get_struct_6B().unpack(str[start:end])
      self.application_error = bool(self.application_error)
      self.device_error = bool(self.device_error)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_6B().pack(_x.run_mode_active, _x.standby_mode_active, _x.contamination_warning, _x.contamination_error, _x.reference_contour_status, _x.manipulation_status))
      length = len(self.safe_cut_off_path)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(self.safe_cut_off_path.tostring())
      length = len(self.non_safe_cut_off_path)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(self.non_safe_cut_off_path.tostring())
      length = len(self.reset_required_cut_off_path)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(self.reset_required_cut_off_path.tostring())
      _x = self
      buff.write(_get_struct_6B().pack(_x.current_monitoring_case_no_table_1, _x.current_monitoring_case_no_table_2, _x.current_monitoring_case_no_table_3, _x.current_monitoring_case_no_table_4, _x.application_error, _x.device_error))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 6
      (_x.run_mode_active, _x.standby_mode_active, _x.contamination_warning, _x.contamination_error, _x.reference_contour_status, _x.manipulation_status,) = _get_struct_6B().unpack(str[start:end])
      self.run_mode_active = bool(self.run_mode_active)
      self.standby_mode_active = bool(self.standby_mode_active)
      self.contamination_warning = bool(self.contamination_warning)
      self.contamination_error = bool(self.contamination_error)
      self.reference_contour_status = bool(self.reference_contour_status)
      self.manipulation_status = bool(self.manipulation_status)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.safe_cut_off_path = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=length)
      self.safe_cut_off_path = list(map(bool, self.safe_cut_off_path))
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.non_safe_cut_off_path = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=length)
      self.non_safe_cut_off_path = list(map(bool, self.non_safe_cut_off_path))
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.reset_required_cut_off_path = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=length)
      self.reset_required_cut_off_path = list(map(bool, self.reset_required_cut_off_path))
      _x = self
      start = end
      end += 6
      (_x.current_monitoring_case_no_table_1, _x.current_monitoring_case_no_table_2, _x.current_monitoring_case_no_table_3, _x.current_monitoring_case_no_table_4, _x.application_error, _x.device_error,) = _get_struct_6B().unpack(str[start:end])
      self.application_error = bool(self.application_error)
      self.device_error = bool(self.device_error)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_6B = None
def _get_struct_6B():
    global _struct_6B
    if _struct_6B is None:
        _struct_6B = struct.Struct("<6B")
    return _struct_6B
