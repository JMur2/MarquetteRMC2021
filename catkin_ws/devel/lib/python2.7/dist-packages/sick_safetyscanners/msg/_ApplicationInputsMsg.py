# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from sick_safetyscanners/ApplicationInputsMsg.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class ApplicationInputsMsg(genpy.Message):
  _md5sum = "7b0ded75242c9efbfe5da85d5a0cf07c"
  _type = "sick_safetyscanners/ApplicationInputsMsg"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool[] unsafe_inputs_input_sources
bool[] unsafe_inputs_flags

uint16[] monitoring_case_number_inputs
bool[] monitoring_case_number_inputs_flags

int16 linear_velocity_inputs_velocity_0
bool linear_velocity_inputs_velocity_0_valid
bool linear_velocity_inputs_velocity_0_transmitted_safely

int16 linear_velocity_inputs_velocity_1
bool linear_velocity_inputs_velocity_1_valid
bool linear_velocity_inputs_velocity_1_transmitted_safely

uint8 sleep_mode_input

"""
  __slots__ = ['unsafe_inputs_input_sources','unsafe_inputs_flags','monitoring_case_number_inputs','monitoring_case_number_inputs_flags','linear_velocity_inputs_velocity_0','linear_velocity_inputs_velocity_0_valid','linear_velocity_inputs_velocity_0_transmitted_safely','linear_velocity_inputs_velocity_1','linear_velocity_inputs_velocity_1_valid','linear_velocity_inputs_velocity_1_transmitted_safely','sleep_mode_input']
  _slot_types = ['bool[]','bool[]','uint16[]','bool[]','int16','bool','bool','int16','bool','bool','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       unsafe_inputs_input_sources,unsafe_inputs_flags,monitoring_case_number_inputs,monitoring_case_number_inputs_flags,linear_velocity_inputs_velocity_0,linear_velocity_inputs_velocity_0_valid,linear_velocity_inputs_velocity_0_transmitted_safely,linear_velocity_inputs_velocity_1,linear_velocity_inputs_velocity_1_valid,linear_velocity_inputs_velocity_1_transmitted_safely,sleep_mode_input

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ApplicationInputsMsg, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.unsafe_inputs_input_sources is None:
        self.unsafe_inputs_input_sources = []
      if self.unsafe_inputs_flags is None:
        self.unsafe_inputs_flags = []
      if self.monitoring_case_number_inputs is None:
        self.monitoring_case_number_inputs = []
      if self.monitoring_case_number_inputs_flags is None:
        self.monitoring_case_number_inputs_flags = []
      if self.linear_velocity_inputs_velocity_0 is None:
        self.linear_velocity_inputs_velocity_0 = 0
      if self.linear_velocity_inputs_velocity_0_valid is None:
        self.linear_velocity_inputs_velocity_0_valid = False
      if self.linear_velocity_inputs_velocity_0_transmitted_safely is None:
        self.linear_velocity_inputs_velocity_0_transmitted_safely = False
      if self.linear_velocity_inputs_velocity_1 is None:
        self.linear_velocity_inputs_velocity_1 = 0
      if self.linear_velocity_inputs_velocity_1_valid is None:
        self.linear_velocity_inputs_velocity_1_valid = False
      if self.linear_velocity_inputs_velocity_1_transmitted_safely is None:
        self.linear_velocity_inputs_velocity_1_transmitted_safely = False
      if self.sleep_mode_input is None:
        self.sleep_mode_input = 0
    else:
      self.unsafe_inputs_input_sources = []
      self.unsafe_inputs_flags = []
      self.monitoring_case_number_inputs = []
      self.monitoring_case_number_inputs_flags = []
      self.linear_velocity_inputs_velocity_0 = 0
      self.linear_velocity_inputs_velocity_0_valid = False
      self.linear_velocity_inputs_velocity_0_transmitted_safely = False
      self.linear_velocity_inputs_velocity_1 = 0
      self.linear_velocity_inputs_velocity_1_valid = False
      self.linear_velocity_inputs_velocity_1_transmitted_safely = False
      self.sleep_mode_input = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.unsafe_inputs_input_sources)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(struct.Struct(pattern).pack(*self.unsafe_inputs_input_sources))
      length = len(self.unsafe_inputs_flags)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(struct.Struct(pattern).pack(*self.unsafe_inputs_flags))
      length = len(self.monitoring_case_number_inputs)
      buff.write(_struct_I.pack(length))
      pattern = '<%sH'%length
      buff.write(struct.Struct(pattern).pack(*self.monitoring_case_number_inputs))
      length = len(self.monitoring_case_number_inputs_flags)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(struct.Struct(pattern).pack(*self.monitoring_case_number_inputs_flags))
      _x = self
      buff.write(_get_struct_h2Bh3B().pack(_x.linear_velocity_inputs_velocity_0, _x.linear_velocity_inputs_velocity_0_valid, _x.linear_velocity_inputs_velocity_0_transmitted_safely, _x.linear_velocity_inputs_velocity_1, _x.linear_velocity_inputs_velocity_1_valid, _x.linear_velocity_inputs_velocity_1_transmitted_safely, _x.sleep_mode_input))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.unsafe_inputs_input_sources = s.unpack(str[start:end])
      self.unsafe_inputs_input_sources = list(map(bool, self.unsafe_inputs_input_sources))
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.unsafe_inputs_flags = s.unpack(str[start:end])
      self.unsafe_inputs_flags = list(map(bool, self.unsafe_inputs_flags))
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sH'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.monitoring_case_number_inputs = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.monitoring_case_number_inputs_flags = s.unpack(str[start:end])
      self.monitoring_case_number_inputs_flags = list(map(bool, self.monitoring_case_number_inputs_flags))
      _x = self
      start = end
      end += 9
      (_x.linear_velocity_inputs_velocity_0, _x.linear_velocity_inputs_velocity_0_valid, _x.linear_velocity_inputs_velocity_0_transmitted_safely, _x.linear_velocity_inputs_velocity_1, _x.linear_velocity_inputs_velocity_1_valid, _x.linear_velocity_inputs_velocity_1_transmitted_safely, _x.sleep_mode_input,) = _get_struct_h2Bh3B().unpack(str[start:end])
      self.linear_velocity_inputs_velocity_0_valid = bool(self.linear_velocity_inputs_velocity_0_valid)
      self.linear_velocity_inputs_velocity_0_transmitted_safely = bool(self.linear_velocity_inputs_velocity_0_transmitted_safely)
      self.linear_velocity_inputs_velocity_1_valid = bool(self.linear_velocity_inputs_velocity_1_valid)
      self.linear_velocity_inputs_velocity_1_transmitted_safely = bool(self.linear_velocity_inputs_velocity_1_transmitted_safely)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.unsafe_inputs_input_sources)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(self.unsafe_inputs_input_sources.tostring())
      length = len(self.unsafe_inputs_flags)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(self.unsafe_inputs_flags.tostring())
      length = len(self.monitoring_case_number_inputs)
      buff.write(_struct_I.pack(length))
      pattern = '<%sH'%length
      buff.write(self.monitoring_case_number_inputs.tostring())
      length = len(self.monitoring_case_number_inputs_flags)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(self.monitoring_case_number_inputs_flags.tostring())
      _x = self
      buff.write(_get_struct_h2Bh3B().pack(_x.linear_velocity_inputs_velocity_0, _x.linear_velocity_inputs_velocity_0_valid, _x.linear_velocity_inputs_velocity_0_transmitted_safely, _x.linear_velocity_inputs_velocity_1, _x.linear_velocity_inputs_velocity_1_valid, _x.linear_velocity_inputs_velocity_1_transmitted_safely, _x.sleep_mode_input))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.unsafe_inputs_input_sources = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=length)
      self.unsafe_inputs_input_sources = list(map(bool, self.unsafe_inputs_input_sources))
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.unsafe_inputs_flags = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=length)
      self.unsafe_inputs_flags = list(map(bool, self.unsafe_inputs_flags))
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sH'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.monitoring_case_number_inputs = numpy.frombuffer(str[start:end], dtype=numpy.uint16, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.monitoring_case_number_inputs_flags = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=length)
      self.monitoring_case_number_inputs_flags = list(map(bool, self.monitoring_case_number_inputs_flags))
      _x = self
      start = end
      end += 9
      (_x.linear_velocity_inputs_velocity_0, _x.linear_velocity_inputs_velocity_0_valid, _x.linear_velocity_inputs_velocity_0_transmitted_safely, _x.linear_velocity_inputs_velocity_1, _x.linear_velocity_inputs_velocity_1_valid, _x.linear_velocity_inputs_velocity_1_transmitted_safely, _x.sleep_mode_input,) = _get_struct_h2Bh3B().unpack(str[start:end])
      self.linear_velocity_inputs_velocity_0_valid = bool(self.linear_velocity_inputs_velocity_0_valid)
      self.linear_velocity_inputs_velocity_0_transmitted_safely = bool(self.linear_velocity_inputs_velocity_0_transmitted_safely)
      self.linear_velocity_inputs_velocity_1_valid = bool(self.linear_velocity_inputs_velocity_1_valid)
      self.linear_velocity_inputs_velocity_1_transmitted_safely = bool(self.linear_velocity_inputs_velocity_1_transmitted_safely)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_h2Bh3B = None
def _get_struct_h2Bh3B():
    global _struct_h2Bh3B
    if _struct_h2Bh3B is None:
        _struct_h2Bh3B = struct.Struct("<h2Bh3B")
    return _struct_h2Bh3B
