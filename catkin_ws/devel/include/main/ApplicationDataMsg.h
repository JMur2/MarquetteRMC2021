// Generated by gencpp from file main/ApplicationDataMsg.msg
// DO NOT EDIT!


#ifndef MAIN_MESSAGE_APPLICATIONDATAMSG_H
#define MAIN_MESSAGE_APPLICATIONDATAMSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <main/ApplicationInputsMsg.h>
#include <main/ApplicationOutputsMsg.h>

namespace main
{
template <class ContainerAllocator>
struct ApplicationDataMsg_
{
  typedef ApplicationDataMsg_<ContainerAllocator> Type;

  ApplicationDataMsg_()
    : inputs()
    , outputs()  {
    }
  ApplicationDataMsg_(const ContainerAllocator& _alloc)
    : inputs(_alloc)
    , outputs(_alloc)  {
  (void)_alloc;
    }



   typedef  ::main::ApplicationInputsMsg_<ContainerAllocator>  _inputs_type;
  _inputs_type inputs;

   typedef  ::main::ApplicationOutputsMsg_<ContainerAllocator>  _outputs_type;
  _outputs_type outputs;





  typedef boost::shared_ptr< ::main::ApplicationDataMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::main::ApplicationDataMsg_<ContainerAllocator> const> ConstPtr;

}; // struct ApplicationDataMsg_

typedef ::main::ApplicationDataMsg_<std::allocator<void> > ApplicationDataMsg;

typedef boost::shared_ptr< ::main::ApplicationDataMsg > ApplicationDataMsgPtr;
typedef boost::shared_ptr< ::main::ApplicationDataMsg const> ApplicationDataMsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::main::ApplicationDataMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::main::ApplicationDataMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::main::ApplicationDataMsg_<ContainerAllocator1> & lhs, const ::main::ApplicationDataMsg_<ContainerAllocator2> & rhs)
{
  return lhs.inputs == rhs.inputs &&
    lhs.outputs == rhs.outputs;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::main::ApplicationDataMsg_<ContainerAllocator1> & lhs, const ::main::ApplicationDataMsg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace main

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::main::ApplicationDataMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::main::ApplicationDataMsg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::main::ApplicationDataMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::main::ApplicationDataMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::main::ApplicationDataMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::main::ApplicationDataMsg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::main::ApplicationDataMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e2c1cd2050a13f8b7c83b35c17583a56";
  }

  static const char* value(const ::main::ApplicationDataMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe2c1cd2050a13f8bULL;
  static const uint64_t static_value2 = 0x7c83b35c17583a56ULL;
};

template<class ContainerAllocator>
struct DataType< ::main::ApplicationDataMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "main/ApplicationDataMsg";
  }

  static const char* value(const ::main::ApplicationDataMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::main::ApplicationDataMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ApplicationInputsMsg inputs\n"
"ApplicationOutputsMsg outputs\n"
"\n"
"================================================================================\n"
"MSG: main/ApplicationInputsMsg\n"
"bool[] unsafe_inputs_input_sources\n"
"bool[] unsafe_inputs_flags\n"
"\n"
"uint16[] monitoring_case_number_inputs\n"
"bool[] monitoring_case_number_inputs_flags\n"
"\n"
"int16 linear_velocity_inputs_velocity_0\n"
"bool linear_velocity_inputs_velocity_0_valid\n"
"bool linear_velocity_inputs_velocity_0_transmitted_safely\n"
"\n"
"int16 linear_velocity_inputs_velocity_1\n"
"bool linear_velocity_inputs_velocity_1_valid\n"
"bool linear_velocity_inputs_velocity_1_transmitted_safely\n"
"\n"
"uint8 sleep_mode_input\n"
"\n"
"\n"
"================================================================================\n"
"MSG: main/ApplicationOutputsMsg\n"
"bool[] evaluation_path_outputs_eval_out\n"
"bool[] evaluation_path_outputs_is_safe\n"
"bool[] evaluation_path_outputs_is_valid\n"
"\n"
"uint16[] monitoring_case_number_outputs \n"
"bool[] monitoring_case_number_outputs_flags\n"
"\n"
"uint8 sleep_mode_output\n"
"bool sleep_mode_output_valid\n"
"\n"
"bool error_flag_contamination_warning\n"
"bool error_flag_contamination_error\n"
"bool error_flag_manipulation_error\n"
"bool error_flag_glare\n"
"bool error_flag_reference_contour_intruded\n"
"bool error_flag_critical_error\n"
"bool error_flags_are_valid\n"
"\n"
"\n"
"int16 linear_velocity_outputs_velocity_0\n"
"bool linear_velocity_outputs_velocity_0_valid\n"
"bool linear_velocity_outputs_velocity_0_transmitted_safely\n"
"\n"
"int16 linear_velocity_outputs_velocity_1\n"
"bool linear_velocity_outputs_velocity_1_valid\n"
"bool linear_velocity_outputs_velocity_1_transmitted_safely\n"
"\n"
"int16[] resulting_velocity\n"
"bool[] resulting_velocity_flags\n"
"\n"
" \n"
;
  }

  static const char* value(const ::main::ApplicationDataMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::main::ApplicationDataMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.inputs);
      stream.next(m.outputs);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ApplicationDataMsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::main::ApplicationDataMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::main::ApplicationDataMsg_<ContainerAllocator>& v)
  {
    s << indent << "inputs: ";
    s << std::endl;
    Printer< ::main::ApplicationInputsMsg_<ContainerAllocator> >::stream(s, indent + "  ", v.inputs);
    s << indent << "outputs: ";
    s << std::endl;
    Printer< ::main::ApplicationOutputsMsg_<ContainerAllocator> >::stream(s, indent + "  ", v.outputs);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MAIN_MESSAGE_APPLICATIONDATAMSG_H
