// Generated by gencpp from file main/DerivedValuesMsg.msg
// DO NOT EDIT!


#ifndef MAIN_MESSAGE_DERIVEDVALUESMSG_H
#define MAIN_MESSAGE_DERIVEDVALUESMSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace main
{
template <class ContainerAllocator>
struct DerivedValuesMsg_
{
  typedef DerivedValuesMsg_<ContainerAllocator> Type;

  DerivedValuesMsg_()
    : multiplication_factor(0)
    , number_of_beams(0)
    , scan_time(0)
    , start_angle(0.0)
    , angular_beam_resolution(0.0)
    , interbeam_period(0)  {
    }
  DerivedValuesMsg_(const ContainerAllocator& _alloc)
    : multiplication_factor(0)
    , number_of_beams(0)
    , scan_time(0)
    , start_angle(0.0)
    , angular_beam_resolution(0.0)
    , interbeam_period(0)  {
  (void)_alloc;
    }



   typedef uint16_t _multiplication_factor_type;
  _multiplication_factor_type multiplication_factor;

   typedef uint16_t _number_of_beams_type;
  _number_of_beams_type number_of_beams;

   typedef uint16_t _scan_time_type;
  _scan_time_type scan_time;

   typedef float _start_angle_type;
  _start_angle_type start_angle;

   typedef float _angular_beam_resolution_type;
  _angular_beam_resolution_type angular_beam_resolution;

   typedef uint32_t _interbeam_period_type;
  _interbeam_period_type interbeam_period;





  typedef boost::shared_ptr< ::main::DerivedValuesMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::main::DerivedValuesMsg_<ContainerAllocator> const> ConstPtr;

}; // struct DerivedValuesMsg_

typedef ::main::DerivedValuesMsg_<std::allocator<void> > DerivedValuesMsg;

typedef boost::shared_ptr< ::main::DerivedValuesMsg > DerivedValuesMsgPtr;
typedef boost::shared_ptr< ::main::DerivedValuesMsg const> DerivedValuesMsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::main::DerivedValuesMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::main::DerivedValuesMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::main::DerivedValuesMsg_<ContainerAllocator1> & lhs, const ::main::DerivedValuesMsg_<ContainerAllocator2> & rhs)
{
  return lhs.multiplication_factor == rhs.multiplication_factor &&
    lhs.number_of_beams == rhs.number_of_beams &&
    lhs.scan_time == rhs.scan_time &&
    lhs.start_angle == rhs.start_angle &&
    lhs.angular_beam_resolution == rhs.angular_beam_resolution &&
    lhs.interbeam_period == rhs.interbeam_period;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::main::DerivedValuesMsg_<ContainerAllocator1> & lhs, const ::main::DerivedValuesMsg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace main

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::main::DerivedValuesMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::main::DerivedValuesMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::main::DerivedValuesMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::main::DerivedValuesMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::main::DerivedValuesMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::main::DerivedValuesMsg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::main::DerivedValuesMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "04584ac5d46a750ab91f3b01bac703dd";
  }

  static const char* value(const ::main::DerivedValuesMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x04584ac5d46a750aULL;
  static const uint64_t static_value2 = 0xb91f3b01bac703ddULL;
};

template<class ContainerAllocator>
struct DataType< ::main::DerivedValuesMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "main/DerivedValuesMsg";
  }

  static const char* value(const ::main::DerivedValuesMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::main::DerivedValuesMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint16 multiplication_factor\n"
"uint16 number_of_beams\n"
"uint16 scan_time\n"
"float32 start_angle\n"
"float32 angular_beam_resolution\n"
"uint32 interbeam_period\n"
;
  }

  static const char* value(const ::main::DerivedValuesMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::main::DerivedValuesMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.multiplication_factor);
      stream.next(m.number_of_beams);
      stream.next(m.scan_time);
      stream.next(m.start_angle);
      stream.next(m.angular_beam_resolution);
      stream.next(m.interbeam_period);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DerivedValuesMsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::main::DerivedValuesMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::main::DerivedValuesMsg_<ContainerAllocator>& v)
  {
    s << indent << "multiplication_factor: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.multiplication_factor);
    s << indent << "number_of_beams: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.number_of_beams);
    s << indent << "scan_time: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.scan_time);
    s << indent << "start_angle: ";
    Printer<float>::stream(s, indent + "  ", v.start_angle);
    s << indent << "angular_beam_resolution: ";
    Printer<float>::stream(s, indent + "  ", v.angular_beam_resolution);
    s << indent << "interbeam_period: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.interbeam_period);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MAIN_MESSAGE_DERIVEDVALUESMSG_H
