// Generated by gencpp from file main/ScanPointMsg.msg
// DO NOT EDIT!


#ifndef MAIN_MESSAGE_SCANPOINTMSG_H
#define MAIN_MESSAGE_SCANPOINTMSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace main
{
template <class ContainerAllocator>
struct ScanPointMsg_
{
  typedef ScanPointMsg_<ContainerAllocator> Type;

  ScanPointMsg_()
    : angle(0.0)
    , distance(0)
    , reflectivity(0)
    , valid(false)
    , infinite(false)
    , glare(false)
    , reflector(false)
    , contamination(false)
    , contamination_warning(false)  {
    }
  ScanPointMsg_(const ContainerAllocator& _alloc)
    : angle(0.0)
    , distance(0)
    , reflectivity(0)
    , valid(false)
    , infinite(false)
    , glare(false)
    , reflector(false)
    , contamination(false)
    , contamination_warning(false)  {
  (void)_alloc;
    }



   typedef float _angle_type;
  _angle_type angle;

   typedef uint16_t _distance_type;
  _distance_type distance;

   typedef uint8_t _reflectivity_type;
  _reflectivity_type reflectivity;

   typedef uint8_t _valid_type;
  _valid_type valid;

   typedef uint8_t _infinite_type;
  _infinite_type infinite;

   typedef uint8_t _glare_type;
  _glare_type glare;

   typedef uint8_t _reflector_type;
  _reflector_type reflector;

   typedef uint8_t _contamination_type;
  _contamination_type contamination;

   typedef uint8_t _contamination_warning_type;
  _contamination_warning_type contamination_warning;





  typedef boost::shared_ptr< ::main::ScanPointMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::main::ScanPointMsg_<ContainerAllocator> const> ConstPtr;

}; // struct ScanPointMsg_

typedef ::main::ScanPointMsg_<std::allocator<void> > ScanPointMsg;

typedef boost::shared_ptr< ::main::ScanPointMsg > ScanPointMsgPtr;
typedef boost::shared_ptr< ::main::ScanPointMsg const> ScanPointMsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::main::ScanPointMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::main::ScanPointMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::main::ScanPointMsg_<ContainerAllocator1> & lhs, const ::main::ScanPointMsg_<ContainerAllocator2> & rhs)
{
  return lhs.angle == rhs.angle &&
    lhs.distance == rhs.distance &&
    lhs.reflectivity == rhs.reflectivity &&
    lhs.valid == rhs.valid &&
    lhs.infinite == rhs.infinite &&
    lhs.glare == rhs.glare &&
    lhs.reflector == rhs.reflector &&
    lhs.contamination == rhs.contamination &&
    lhs.contamination_warning == rhs.contamination_warning;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::main::ScanPointMsg_<ContainerAllocator1> & lhs, const ::main::ScanPointMsg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace main

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::main::ScanPointMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::main::ScanPointMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::main::ScanPointMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::main::ScanPointMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::main::ScanPointMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::main::ScanPointMsg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::main::ScanPointMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a01759b77f0ee80f572c218c25f9954e";
  }

  static const char* value(const ::main::ScanPointMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa01759b77f0ee80fULL;
  static const uint64_t static_value2 = 0x572c218c25f9954eULL;
};

template<class ContainerAllocator>
struct DataType< ::main::ScanPointMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "main/ScanPointMsg";
  }

  static const char* value(const ::main::ScanPointMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::main::ScanPointMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 angle\n"
"uint16 distance\n"
"uint8 reflectivity\n"
"bool valid\n"
"bool infinite\n"
"bool glare\n"
"bool reflector\n"
"bool contamination\n"
"bool contamination_warning\n"
;
  }

  static const char* value(const ::main::ScanPointMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::main::ScanPointMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.angle);
      stream.next(m.distance);
      stream.next(m.reflectivity);
      stream.next(m.valid);
      stream.next(m.infinite);
      stream.next(m.glare);
      stream.next(m.reflector);
      stream.next(m.contamination);
      stream.next(m.contamination_warning);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ScanPointMsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::main::ScanPointMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::main::ScanPointMsg_<ContainerAllocator>& v)
  {
    s << indent << "angle: ";
    Printer<float>::stream(s, indent + "  ", v.angle);
    s << indent << "distance: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.distance);
    s << indent << "reflectivity: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.reflectivity);
    s << indent << "valid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.valid);
    s << indent << "infinite: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.infinite);
    s << indent << "glare: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.glare);
    s << indent << "reflector: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.reflector);
    s << indent << "contamination: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.contamination);
    s << indent << "contamination_warning: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.contamination_warning);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MAIN_MESSAGE_SCANPOINTMSG_H
