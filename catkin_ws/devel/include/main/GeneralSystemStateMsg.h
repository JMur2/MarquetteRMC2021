// Generated by gencpp from file main/GeneralSystemStateMsg.msg
// DO NOT EDIT!


#ifndef MAIN_MESSAGE_GENERALSYSTEMSTATEMSG_H
#define MAIN_MESSAGE_GENERALSYSTEMSTATEMSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace main
{
template <class ContainerAllocator>
struct GeneralSystemStateMsg_
{
  typedef GeneralSystemStateMsg_<ContainerAllocator> Type;

  GeneralSystemStateMsg_()
    : run_mode_active(false)
    , standby_mode_active(false)
    , contamination_warning(false)
    , contamination_error(false)
    , reference_contour_status(false)
    , manipulation_status(false)
    , safe_cut_off_path()
    , non_safe_cut_off_path()
    , reset_required_cut_off_path()
    , current_monitoring_case_no_table_1(0)
    , current_monitoring_case_no_table_2(0)
    , current_monitoring_case_no_table_3(0)
    , current_monitoring_case_no_table_4(0)
    , application_error(false)
    , device_error(false)  {
    }
  GeneralSystemStateMsg_(const ContainerAllocator& _alloc)
    : run_mode_active(false)
    , standby_mode_active(false)
    , contamination_warning(false)
    , contamination_error(false)
    , reference_contour_status(false)
    , manipulation_status(false)
    , safe_cut_off_path(_alloc)
    , non_safe_cut_off_path(_alloc)
    , reset_required_cut_off_path(_alloc)
    , current_monitoring_case_no_table_1(0)
    , current_monitoring_case_no_table_2(0)
    , current_monitoring_case_no_table_3(0)
    , current_monitoring_case_no_table_4(0)
    , application_error(false)
    , device_error(false)  {
  (void)_alloc;
    }



   typedef uint8_t _run_mode_active_type;
  _run_mode_active_type run_mode_active;

   typedef uint8_t _standby_mode_active_type;
  _standby_mode_active_type standby_mode_active;

   typedef uint8_t _contamination_warning_type;
  _contamination_warning_type contamination_warning;

   typedef uint8_t _contamination_error_type;
  _contamination_error_type contamination_error;

   typedef uint8_t _reference_contour_status_type;
  _reference_contour_status_type reference_contour_status;

   typedef uint8_t _manipulation_status_type;
  _manipulation_status_type manipulation_status;

   typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _safe_cut_off_path_type;
  _safe_cut_off_path_type safe_cut_off_path;

   typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _non_safe_cut_off_path_type;
  _non_safe_cut_off_path_type non_safe_cut_off_path;

   typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _reset_required_cut_off_path_type;
  _reset_required_cut_off_path_type reset_required_cut_off_path;

   typedef uint8_t _current_monitoring_case_no_table_1_type;
  _current_monitoring_case_no_table_1_type current_monitoring_case_no_table_1;

   typedef uint8_t _current_monitoring_case_no_table_2_type;
  _current_monitoring_case_no_table_2_type current_monitoring_case_no_table_2;

   typedef uint8_t _current_monitoring_case_no_table_3_type;
  _current_monitoring_case_no_table_3_type current_monitoring_case_no_table_3;

   typedef uint8_t _current_monitoring_case_no_table_4_type;
  _current_monitoring_case_no_table_4_type current_monitoring_case_no_table_4;

   typedef uint8_t _application_error_type;
  _application_error_type application_error;

   typedef uint8_t _device_error_type;
  _device_error_type device_error;





  typedef boost::shared_ptr< ::main::GeneralSystemStateMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::main::GeneralSystemStateMsg_<ContainerAllocator> const> ConstPtr;

}; // struct GeneralSystemStateMsg_

typedef ::main::GeneralSystemStateMsg_<std::allocator<void> > GeneralSystemStateMsg;

typedef boost::shared_ptr< ::main::GeneralSystemStateMsg > GeneralSystemStateMsgPtr;
typedef boost::shared_ptr< ::main::GeneralSystemStateMsg const> GeneralSystemStateMsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::main::GeneralSystemStateMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::main::GeneralSystemStateMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::main::GeneralSystemStateMsg_<ContainerAllocator1> & lhs, const ::main::GeneralSystemStateMsg_<ContainerAllocator2> & rhs)
{
  return lhs.run_mode_active == rhs.run_mode_active &&
    lhs.standby_mode_active == rhs.standby_mode_active &&
    lhs.contamination_warning == rhs.contamination_warning &&
    lhs.contamination_error == rhs.contamination_error &&
    lhs.reference_contour_status == rhs.reference_contour_status &&
    lhs.manipulation_status == rhs.manipulation_status &&
    lhs.safe_cut_off_path == rhs.safe_cut_off_path &&
    lhs.non_safe_cut_off_path == rhs.non_safe_cut_off_path &&
    lhs.reset_required_cut_off_path == rhs.reset_required_cut_off_path &&
    lhs.current_monitoring_case_no_table_1 == rhs.current_monitoring_case_no_table_1 &&
    lhs.current_monitoring_case_no_table_2 == rhs.current_monitoring_case_no_table_2 &&
    lhs.current_monitoring_case_no_table_3 == rhs.current_monitoring_case_no_table_3 &&
    lhs.current_monitoring_case_no_table_4 == rhs.current_monitoring_case_no_table_4 &&
    lhs.application_error == rhs.application_error &&
    lhs.device_error == rhs.device_error;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::main::GeneralSystemStateMsg_<ContainerAllocator1> & lhs, const ::main::GeneralSystemStateMsg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace main

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::main::GeneralSystemStateMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::main::GeneralSystemStateMsg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::main::GeneralSystemStateMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::main::GeneralSystemStateMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::main::GeneralSystemStateMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::main::GeneralSystemStateMsg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::main::GeneralSystemStateMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fda37ee099981af2c442eec5d758ecbd";
  }

  static const char* value(const ::main::GeneralSystemStateMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xfda37ee099981af2ULL;
  static const uint64_t static_value2 = 0xc442eec5d758ecbdULL;
};

template<class ContainerAllocator>
struct DataType< ::main::GeneralSystemStateMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "main/GeneralSystemStateMsg";
  }

  static const char* value(const ::main::GeneralSystemStateMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::main::GeneralSystemStateMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool run_mode_active\n"
"bool standby_mode_active\n"
"bool contamination_warning\n"
"bool contamination_error\n"
"bool reference_contour_status\n"
"bool manipulation_status\n"
"\n"
"bool[] safe_cut_off_path\n"
"bool[] non_safe_cut_off_path\n"
"bool[] reset_required_cut_off_path\n"
"\n"
"uint8 current_monitoring_case_no_table_1\n"
"uint8 current_monitoring_case_no_table_2\n"
"uint8 current_monitoring_case_no_table_3\n"
"uint8 current_monitoring_case_no_table_4\n"
"\n"
"bool application_error\n"
"bool device_error\n"
;
  }

  static const char* value(const ::main::GeneralSystemStateMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::main::GeneralSystemStateMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.run_mode_active);
      stream.next(m.standby_mode_active);
      stream.next(m.contamination_warning);
      stream.next(m.contamination_error);
      stream.next(m.reference_contour_status);
      stream.next(m.manipulation_status);
      stream.next(m.safe_cut_off_path);
      stream.next(m.non_safe_cut_off_path);
      stream.next(m.reset_required_cut_off_path);
      stream.next(m.current_monitoring_case_no_table_1);
      stream.next(m.current_monitoring_case_no_table_2);
      stream.next(m.current_monitoring_case_no_table_3);
      stream.next(m.current_monitoring_case_no_table_4);
      stream.next(m.application_error);
      stream.next(m.device_error);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GeneralSystemStateMsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::main::GeneralSystemStateMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::main::GeneralSystemStateMsg_<ContainerAllocator>& v)
  {
    s << indent << "run_mode_active: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.run_mode_active);
    s << indent << "standby_mode_active: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.standby_mode_active);
    s << indent << "contamination_warning: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.contamination_warning);
    s << indent << "contamination_error: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.contamination_error);
    s << indent << "reference_contour_status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.reference_contour_status);
    s << indent << "manipulation_status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.manipulation_status);
    s << indent << "safe_cut_off_path[]" << std::endl;
    for (size_t i = 0; i < v.safe_cut_off_path.size(); ++i)
    {
      s << indent << "  safe_cut_off_path[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.safe_cut_off_path[i]);
    }
    s << indent << "non_safe_cut_off_path[]" << std::endl;
    for (size_t i = 0; i < v.non_safe_cut_off_path.size(); ++i)
    {
      s << indent << "  non_safe_cut_off_path[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.non_safe_cut_off_path[i]);
    }
    s << indent << "reset_required_cut_off_path[]" << std::endl;
    for (size_t i = 0; i < v.reset_required_cut_off_path.size(); ++i)
    {
      s << indent << "  reset_required_cut_off_path[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.reset_required_cut_off_path[i]);
    }
    s << indent << "current_monitoring_case_no_table_1: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.current_monitoring_case_no_table_1);
    s << indent << "current_monitoring_case_no_table_2: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.current_monitoring_case_no_table_2);
    s << indent << "current_monitoring_case_no_table_3: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.current_monitoring_case_no_table_3);
    s << indent << "current_monitoring_case_no_table_4: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.current_monitoring_case_no_table_4);
    s << indent << "application_error: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.application_error);
    s << indent << "device_error: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.device_error);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MAIN_MESSAGE_GENERALSYSTEMSTATEMSG_H
