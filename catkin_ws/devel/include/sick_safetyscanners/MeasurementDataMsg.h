// Generated by gencpp from file sick_safetyscanners/MeasurementDataMsg.msg
// DO NOT EDIT!


#ifndef SICK_SAFETYSCANNERS_MESSAGE_MEASUREMENTDATAMSG_H
#define SICK_SAFETYSCANNERS_MESSAGE_MEASUREMENTDATAMSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <sick_safetyscanners/ScanPointMsg.h>

namespace sick_safetyscanners
{
template <class ContainerAllocator>
struct MeasurementDataMsg_
{
  typedef MeasurementDataMsg_<ContainerAllocator> Type;

  MeasurementDataMsg_()
    : number_of_beams(0)
    , scan_points()  {
    }
  MeasurementDataMsg_(const ContainerAllocator& _alloc)
    : number_of_beams(0)
    , scan_points(_alloc)  {
  (void)_alloc;
    }



   typedef uint32_t _number_of_beams_type;
  _number_of_beams_type number_of_beams;

   typedef std::vector< ::sick_safetyscanners::ScanPointMsg_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::sick_safetyscanners::ScanPointMsg_<ContainerAllocator> >::other >  _scan_points_type;
  _scan_points_type scan_points;





  typedef boost::shared_ptr< ::sick_safetyscanners::MeasurementDataMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sick_safetyscanners::MeasurementDataMsg_<ContainerAllocator> const> ConstPtr;

}; // struct MeasurementDataMsg_

typedef ::sick_safetyscanners::MeasurementDataMsg_<std::allocator<void> > MeasurementDataMsg;

typedef boost::shared_ptr< ::sick_safetyscanners::MeasurementDataMsg > MeasurementDataMsgPtr;
typedef boost::shared_ptr< ::sick_safetyscanners::MeasurementDataMsg const> MeasurementDataMsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::sick_safetyscanners::MeasurementDataMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::sick_safetyscanners::MeasurementDataMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::sick_safetyscanners::MeasurementDataMsg_<ContainerAllocator1> & lhs, const ::sick_safetyscanners::MeasurementDataMsg_<ContainerAllocator2> & rhs)
{
  return lhs.number_of_beams == rhs.number_of_beams &&
    lhs.scan_points == rhs.scan_points;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::sick_safetyscanners::MeasurementDataMsg_<ContainerAllocator1> & lhs, const ::sick_safetyscanners::MeasurementDataMsg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace sick_safetyscanners

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::sick_safetyscanners::MeasurementDataMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sick_safetyscanners::MeasurementDataMsg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sick_safetyscanners::MeasurementDataMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sick_safetyscanners::MeasurementDataMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sick_safetyscanners::MeasurementDataMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sick_safetyscanners::MeasurementDataMsg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::sick_safetyscanners::MeasurementDataMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b7e755cfc4fb85e1a4ded54fd0d31589";
  }

  static const char* value(const ::sick_safetyscanners::MeasurementDataMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb7e755cfc4fb85e1ULL;
  static const uint64_t static_value2 = 0xa4ded54fd0d31589ULL;
};

template<class ContainerAllocator>
struct DataType< ::sick_safetyscanners::MeasurementDataMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sick_safetyscanners/MeasurementDataMsg";
  }

  static const char* value(const ::sick_safetyscanners::MeasurementDataMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::sick_safetyscanners::MeasurementDataMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint32 number_of_beams\n"
"ScanPointMsg[] scan_points\n"
"\n"
"\n"
"================================================================================\n"
"MSG: sick_safetyscanners/ScanPointMsg\n"
"float32 angle\n"
"uint16 distance\n"
"uint8 reflectivity\n"
"bool valid\n"
"bool infinite\n"
"bool glare\n"
"bool reflector\n"
"bool contamination\n"
"bool contamination_warning\n"
;
  }

  static const char* value(const ::sick_safetyscanners::MeasurementDataMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::sick_safetyscanners::MeasurementDataMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.number_of_beams);
      stream.next(m.scan_points);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MeasurementDataMsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sick_safetyscanners::MeasurementDataMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::sick_safetyscanners::MeasurementDataMsg_<ContainerAllocator>& v)
  {
    s << indent << "number_of_beams: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.number_of_beams);
    s << indent << "scan_points[]" << std::endl;
    for (size_t i = 0; i < v.scan_points.size(); ++i)
    {
      s << indent << "  scan_points[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::sick_safetyscanners::ScanPointMsg_<ContainerAllocator> >::stream(s, indent + "    ", v.scan_points[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // SICK_SAFETYSCANNERS_MESSAGE_MEASUREMENTDATAMSG_H
